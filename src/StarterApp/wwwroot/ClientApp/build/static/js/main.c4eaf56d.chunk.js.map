{"version":3,"sources":["Areas/Categories/CategoriesForm.tsx","Areas/Categories/CategoriesTable.tsx","Areas/Categories/CategoriesContainer.tsx","Areas/Dashboard/TopTile.tsx","Areas/Dashboard/DashboardTilesContainer.tsx","Areas/Dashboard/RecentIssuingsSupplyings/RecentIssuingsSupplyingsContainer.tsx","Areas/Dashboard/DashboardContainer.tsx","Areas/Examples/ExampleDraggableObjects.tsx","Areas/Examples/ExampleForm.tsx","Shared/Util/useFakeRequest.tsx","Areas/Examples/ExampleTabsAlerts.tsx","Areas/Examples/ExampleContainer.tsx","Areas/Issues/Issue.ts","Areas/Issues/IssuesTable.tsx","Areas/Issues/IssuesContainer.tsx","Shared/Util/useLocalCrud.tsx","Areas/Issues/Pages/IssueDetailsForm.tsx","Areas/Issues/Pages/IssueDetailsTable.tsx","Areas/Issues/Pages/IssuesForm.tsx","Areas/Issues/Pages/IssuesFormContainer.tsx","Areas/Products/ProductsForm.tsx","Areas/Products/ProductsTable.tsx","Areas/Products/ProductsContainer.tsx","Areas/Supplies/Pages/SuppliesForm.tsx","Areas/Supplies/Pages/SupplyDetailsForm.tsx","Areas/Supplies/Pages/SupplyDetailsTable.tsx","Areas/Supplies/Pages/SuppliesFormContainer.tsx","Areas/Supplies/SuppliesTable.tsx","Areas/Supplies/Supply.ts","Areas/Supplies/SuppliesContainer.tsx","App.tsx","index.tsx"],"names":["CategoriesForm","entity","onSubmit","onCancel","requestStatus","handleOnSubmit","useCallback","value","formik","useFormik","initialValues","validationSchema","yup","shape","name","required","validateOnMount","validateOnBlur","validateOnChange","handleSubmit","getFieldProps","label","placeholder","src","values","thumbnail","alt","width","center","entityId","submitRequest","disableSubmit","isValid","CategoriesTable","items","paginationSorting","selectable","totalResults","fetchtStatus","deleteStatus","onCreate","onEdit","onDelete","id","collapseAt","sortParams","sort","onSort","setSort","isLoading","isPending","hasInitialResponse","isUpdating","hasError","hasSelectableItems","onSelectAll","selectAllItems","allItemsSelected","sortField","map","item","key","onSelected","setSelectedItem","rowId","selected","_selected","fullWidthOnMobile","rowOnMobile","height","promoteToHeaderOnMobile","size","onClick","onPageChange","setPage","page","rowsPerPage","onRowsPerPageChange","setRowsPerPage","rowsPerPageOptions","showRowsPerPageSelect","variant","color","CategoriesContainer","showFormModal","setShowFormModal","setHideFormModal","useBooleanState","editingEntity","setEditingEntity","useState","usePaginationAndSorting","defaultSortField","defaultSortDirection","actions","status","useCrudOperations","onCreateSuccess","fetch","onUpdateSuccess","onDeleteSuccess","useSelectableItems","read","paginationSortingQuery","useEffect","handleOnCreate","handleOnEdit","update","handleOnDelete","selectedIds","forEach","deleteId","selectableItems","delete","open","title","TopTile","titleSubHeading","countLabel","lastDate","count","leftBorder","errorMessage","marginTop","labelColor","date","DashboardTilesContainer","categoryVsLastWeek","categoryVsLastWeekActions","categoryVsLastWeekRequestStatus","useApiRequest","categoryVsLastWeekTile","useMemo","leastProductVsLastWeek","leastProductVsLastWeekActions","leastProductVsLastWeekRequestStatus","topQtyProducts","topQtyProductsActions","makeRequest","rows","rowHeight","breakpoints","minWidth","columns","gridGap","countLastWeek","lastActionDate","justifyContent","data","dataKey","tooltip","Math","round","qty","totalQty","weight","RecentIssuingSupplyingContainer","history","useHistory","recentIssuings","recentIssuingsActions","recentIssuingsRequestStatus","recentSupplyings","recentSupplyingsActions","recentSupplyingsRequestStatus","bottom","push","notes","toString","DashboardContainer","logResult","logActions","console","log","ExampleDraggableObjects","setItems","handleLog","something","minHeight","onOrderChange","renderItem","titles","x","ExampleForm","pass","setRequestStatus","setTimeout","useFakeRequestStatus","firstName","lastName","email","hasConsent","time","radio","dataValue","dataLabel","sortAlphabetically","marginBottom","iconLeft","htmlColor","grow","marginLeft","ExampleTabsAlerts","currentTab","setCurrentTab","onChange","type","ExampleContainer","col","colSpan","row","filtersConfig","IssuesTable","transactionNumber","issueDate","IssuesContainer","deleteAction","deleteRequestStatus","onSuccess","filterValues","setFilterValues","issueDateRange","from","to","searchText","pageSize","orderBy","field","sortDirection","direction","filter","issueDateTo","issueDateFrom","handleOnSearch","search","onSearch","filters","config","onFiltersChange","searchTerm","onSearchChange","useLocalCrud","editingDetails","setEditingDetail","editingDetailsName","onCreateDetail","detailDefaultValue","onEditDetail","editingDetail","onConfirmDetail","undefined","index","obj","onDeleteDetail","newArr","slice","splice","IssueDetailsForm","productLookup","productName","find","productId","quantity","positive","IssueDetailsTable","alignRight","IssuesForm","children","setValues","issueDetails","min","showTime","clearable","IssuesFormContainer","useParams","productLookupAction","productRequestStatus","_","i","fetchIssue","fetchProductLookup","handleOnCancel","handleOnCreateDetail","handleOnEditDetail","handleOnConfirmDetail","handleOnDeleteDetail","parseInt","Date","top","ProductsForm","categoryLookup","ProductsTable","categoryName","_isInLastRow","description","ProductsContainer","categoryLookupAction","fetchCategoryLookup","categoryId","alignItems","SuppliesForm","supplyDetails","supplyDate","SupplyDetailsForm","SupplyDetailsTable","SuppliesFormContainer","fetchSupply","SuppliesTable","clickedItemId","SuppliesContainer","setClickedItemId","supplyDateRange","supplyDateTo","supplyDateFrom","require","App","toastMsg","setToastMsg","toastSeverity","setToastSeverity","signalRConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","state","HubConnectionState","Disconnected","start","on","sessionId","message","logo","icon","path","component","exact","PageNotFound","severity","setMessage","async","ReactDOM","render","errorComponent","maxContentWidth","document","getElementById","initializeApp"],"mappings":"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","file":"static/js/main.c4eaf56d.chunk.js","sourcesContent":["import { FieldGroup, Form, FormFooter, getFieldProps, Image, TextField } from '@msamirtt/react-components';\r\nimport { RequestStatus } from '@msamirtt/react-infrastructure';\r\nimport { useFormik } from 'formik';\r\nimport React, { useCallback } from 'react';\r\nimport * as yup from 'yup';\r\n\r\ninterface Props {\r\n    entity: any;\r\n    onSubmit: (value: any) => void;\r\n    onCancel: () => void;\r\n    requestStatus: RequestStatus;\r\n}\r\n\r\nexport const CategoriesForm: React.FC<Props> = ({ entity, onSubmit, onCancel, requestStatus }) => {\r\n    const handleOnSubmit = useCallback(\r\n        (value: any) => {\r\n            onSubmit(value);\r\n        },\r\n        [onSubmit]\r\n    );\r\n\r\n    const formik = useFormik({\r\n        initialValues: { ...entity },\r\n        validationSchema: yup.object().shape({\r\n            name: yup.string().required('Required')\r\n        }),\r\n        validateOnMount: false,\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        onSubmit: handleOnSubmit\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n            <FieldGroup>\r\n                <TextField {...getFieldProps(formik, 'name')} label=\"Name\" placeholder=\"Category Name\" />\r\n                <TextField {...getFieldProps(formik, 'thumbnail')} label=\"Thumbnail\" placeholder=\"Category Thumbnail\" />\r\n            </FieldGroup>\r\n            <Image src={formik.values.thumbnail} alt=\"alt\" width={500} center />\r\n\r\n            <FormFooter\r\n                entityId=\"id\"\r\n                submitRequest={requestStatus}\r\n                onCancel={onCancel}\r\n                disableSubmit={!formik.isValid}\r\n            />\r\n        </Form>\r\n    );\r\n};\r\n","import {\r\n    Image,\r\n    LoadingButton,\r\n    PaginationAndSortingResponse,\r\n    PrimaryButton,\r\n    ResponsiveTable,\r\n    ResponsiveTableActions,\r\n    ResponsiveTableBody,\r\n    ResponsiveTableCell,\r\n    ResponsiveTableFooter,\r\n    ResponsiveTableHeaderCell,\r\n    ResponsiveTableHeaderRow,\r\n    ResponsiveTablePagination,\r\n    ResponsiveTableRow,\r\n    ResponsiveTableRowActions,\r\n    SecondaryButton\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus, SelectableItem, UseSelectableItemsResponse } from '@msamirtt/react-infrastructure';\r\nimport React from 'react';\r\nimport { Category } from './Category';\r\n\r\ninterface Props {\r\n    items: SelectableItem<Category>[];\r\n    paginationSorting: PaginationAndSortingResponse;\r\n    selectable: UseSelectableItemsResponse<Category>;\r\n    totalResults: number;\r\n    fetchtStatus: RequestStatus;\r\n    deleteStatus: RequestStatus;\r\n    onCreate: () => void;\r\n    onEdit: (entity: any) => void;\r\n    onDelete: () => void;\r\n}\r\n\r\nexport const CategoriesTable: React.FC<Props> = ({\r\n    items,\r\n    paginationSorting,\r\n    selectable,\r\n    totalResults,\r\n    fetchtStatus,\r\n    deleteStatus,\r\n    onCreate,\r\n    onEdit,\r\n    onDelete\r\n}) => (\r\n    <ResponsiveTable\r\n        id=\"category-table\"\r\n        collapseAt={600}\r\n        sortParams={paginationSorting.sort}\r\n        onSort={paginationSorting.setSort}\r\n        isLoading={fetchtStatus.isPending && !fetchtStatus.hasInitialResponse}\r\n        isUpdating={fetchtStatus.isPending && fetchtStatus.hasInitialResponse}\r\n        hasError={fetchtStatus.hasError}\r\n        hasSelectableItems\r\n        onSelectAll={selectable.selectAllItems}\r\n        allItemsSelected={selectable.allItemsSelected}\r\n    >\r\n        <ResponsiveTableHeaderRow>\r\n            <ResponsiveTableHeaderCell width={80} />\r\n            <ResponsiveTableHeaderCell sortField=\"name\">Name</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell />\r\n        </ResponsiveTableHeaderRow>\r\n\r\n        <ResponsiveTableBody>\r\n            {items.map((item: SelectableItem<Category>) => (\r\n                <ResponsiveTableRow\r\n                    key={item.id}\r\n                    onSelected={selectable.setSelectedItem}\r\n                    rowId={item.id}\r\n                    selected={item._selected}\r\n                >\r\n                    <ResponsiveTableCell fullWidthOnMobile rowOnMobile={1}>\r\n                        {item.thumbnail && <Image src={item.thumbnail} alt=\"\" width={80} height={80} center />}\r\n                    </ResponsiveTableCell>\r\n                    <ResponsiveTableCell promoteToHeaderOnMobile>{item.name}</ResponsiveTableCell>\r\n\r\n                    <ResponsiveTableRowActions>\r\n                        <SecondaryButton id=\"action-b1\" size=\"small\" onClick={() => onEdit(item)}>\r\n                            Edit\r\n                        </SecondaryButton>\r\n                    </ResponsiveTableRowActions>\r\n                </ResponsiveTableRow>\r\n            ))}\r\n        </ResponsiveTableBody>\r\n\r\n        <ResponsiveTableFooter>\r\n            <ResponsiveTablePagination\r\n                onPageChange={paginationSorting.setPage}\r\n                page={paginationSorting.page}\r\n                rowsPerPage={paginationSorting.rowsPerPage}\r\n                totalResults={totalResults}\r\n                onRowsPerPageChange={paginationSorting.setRowsPerPage}\r\n                rowsPerPageOptions={[5, 10, 20]}\r\n                showRowsPerPageSelect={true}\r\n            />\r\n            <ResponsiveTableActions>\r\n                <LoadingButton\r\n                    id=\"deleteAction\"\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    requestStatus={deleteStatus}\r\n                    onClick={onDelete}\r\n                >\r\n                    Delete\r\n                </LoadingButton>\r\n                <PrimaryButton id=\"primaryAction\" onClick={onCreate}>\r\n                    New Entry\r\n                </PrimaryButton>\r\n            </ResponsiveTableActions>\r\n        </ResponsiveTableFooter>\r\n    </ResponsiveTable>\r\n);\r\n","import {\r\n    Modal,\r\n    Page,\r\n    PageHeader,\r\n    PageHeaderRow,\r\n    PageHeaderTitle,\r\n    PageSection,\r\n    usePaginationAndSorting\r\n} from '@msamirtt/react-components';\r\nimport { useBooleanState, useCrudOperations, useSelectableItems } from '@msamirtt/react-infrastructure';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { CategoriesForm } from './CategoriesForm';\r\nimport { CategoriesTable } from './CategoriesTable';\r\nimport { Category } from './Category';\r\n\r\nexport const CategoriesContainer = () => {\r\n    const [showFormModal, setShowFormModal, setHideFormModal] = useBooleanState(false);\r\n    const [editingEntity, setEditingEntity] = useState<Category>();\r\n    const paginationSorting = usePaginationAndSorting({\r\n        defaultSortField: 'name',\r\n        defaultSortDirection: 'asc'\r\n    });\r\n\r\n    const [items, actions, status, { totalResults }] = useCrudOperations<Category>('/api/categories', 'channel', {\r\n        onCreateSuccess: () => {\r\n            setHideFormModal();\r\n            fetch();\r\n        },\r\n        onUpdateSuccess: () => {\r\n            setHideFormModal();\r\n            fetch();\r\n        },\r\n        onDeleteSuccess: () => fetch()\r\n    });\r\n\r\n    const selectable = useSelectableItems(items);\r\n    const fetch = useCallback(() => {\r\n        actions.read(`${paginationSorting.paginationSortingQuery}`);\r\n    }, [paginationSorting.paginationSortingQuery, actions.read]);\r\n\r\n    useEffect(() => {\r\n        fetch();\r\n    }, [paginationSorting.paginationSortingQuery]);\r\n\r\n    const handleOnCreate = useCallback(() => {\r\n        setEditingEntity({\r\n            id: '',\r\n            name: '',\r\n            thumbnail: ''\r\n        });\r\n        setShowFormModal();\r\n    }, []);\r\n\r\n    const handleOnEdit = useCallback((entity: Category) => {\r\n        setEditingEntity(entity);\r\n        setShowFormModal();\r\n    }, []);\r\n\r\n    const handleOnSubmit = useCallback(\r\n        (value: Category) => {\r\n            actions.update(value);\r\n            setHideFormModal();\r\n        },\r\n        [actions]\r\n    );\r\n\r\n    const handleOnDelete = useCallback(() => {\r\n        selectable.selectedIds.forEach(id => {\r\n            actions.deleteId(id);\r\n        });\r\n    }, [selectable, actions]);\r\n\r\n    return (\r\n        <Page>\r\n            <PageHeader>\r\n                <PageHeaderRow collapseAt={600}>\r\n                    <PageHeaderTitle>Categories</PageHeaderTitle>\r\n                </PageHeaderRow>\r\n            </PageHeader>\r\n            <PageSection>\r\n                <CategoriesTable\r\n                    items={selectable.selectableItems}\r\n                    paginationSorting={paginationSorting}\r\n                    selectable={selectable}\r\n                    totalResults={totalResults}\r\n                    fetchtStatus={status.read}\r\n                    deleteStatus={status.delete}\r\n                    onCreate={handleOnCreate}\r\n                    onEdit={handleOnEdit}\r\n                    onDelete={handleOnDelete}\r\n                />\r\n                <Modal onCancel={setHideFormModal} open={showFormModal} title=\"Form\" width={700}>\r\n                    <CategoriesForm\r\n                        entity={editingEntity}\r\n                        onCancel={setHideFormModal}\r\n                        onSubmit={handleOnSubmit}\r\n                        requestStatus={status.update}\r\n                    />\r\n                </Modal>\r\n            </PageSection>\r\n        </Page>\r\n    );\r\n};\r\n","import {\r\n    Color,\r\n    ContentLoadingSpinner,\r\n    DateFromNow,\r\n    Tile,\r\n    TileCount,\r\n    TileHeader,\r\n    TileLastUpdated,\r\n    TileSubHeading,\r\n    TileTitle\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus } from '@msamirtt/react-infrastructure';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n    id: string;\r\n    title?: string;\r\n    titleSubHeading?: string;\r\n    count?: number;\r\n    countLabel?: string;\r\n    lastDate?: Date;\r\n    color?: Color;\r\n    requestStatus: RequestStatus;\r\n}\r\n\r\nexport const TopTile: React.FC<Props> = ({\r\n    id,\r\n    title,\r\n    titleSubHeading,\r\n    countLabel,\r\n    lastDate,\r\n    count,\r\n    color,\r\n    requestStatus\r\n}) => (\r\n    <Tile leftBorder={color}>\r\n        <ContentLoadingSpinner\r\n            isLoading={requestStatus.isPending}\r\n            hasError={requestStatus.hasError}\r\n            errorMessage=\"Data not found!\"\r\n        >\r\n            <TileHeader>\r\n                <TileTitle color={color}>{title}</TileTitle>\r\n            </TileHeader>\r\n\r\n            <TileSubHeading color={color} marginTop={0} size={19}>\r\n                {titleSubHeading}\r\n            </TileSubHeading>\r\n\r\n            <TileCount count={count!} color={color} label={countLabel} labelColor={color} />\r\n            <TileLastUpdated>\r\n                <DateFromNow date={lastDate!} />\r\n            </TileLastUpdated>\r\n        </ContentLoadingSpinner>\r\n    </Tile>\r\n);\r\n","import {\r\n    ChartTooltip,\r\n    DoughnutChart,\r\n    FlexLayout,\r\n    FlexLayoutItem,\r\n    GridLayout,\r\n    GridLayoutItem,\r\n    TypographyText\r\n} from '@msamirtt/react-components';\r\nimport { useApiRequest } from '@msamirtt/react-infrastructure';\r\nimport React, { useEffect, useMemo } from 'react';\r\nimport { TopQtyProduct } from './TopQtyProduct';\r\nimport { TopTile } from './TopTile';\r\nimport { TopTileItem } from './TopTileItem';\r\n\r\nexport const DashboardTilesContainer: React.FC = () => {\r\n    const [categoryVsLastWeek, categoryVsLastWeekActions, categoryVsLastWeekRequestStatus] = useApiRequest<\r\n        TopTileItem[]\r\n    >();\r\n\r\n    const categoryVsLastWeekTile = useMemo(() => categoryVsLastWeek[0] || ({} as any), [categoryVsLastWeek]);\r\n\r\n    const [leastProductVsLastWeek, leastProductVsLastWeekActions, leastProductVsLastWeekRequestStatus] = useApiRequest<\r\n        TopTileItem\r\n    >();\r\n\r\n    const [topQtyProducts, topQtyProductsActions] = useApiRequest<TopQtyProduct>();\r\n\r\n    useEffect(() => {\r\n        categoryVsLastWeekActions.makeRequest('GET', '/api/dashboard/category-vs-last-week');\r\n        leastProductVsLastWeekActions.makeRequest('GET', '/api/dashboard/least-product-vs-last-week-tile');\r\n        topQtyProductsActions.makeRequest('GET', '/api/dashboard/top-quantity-products');\r\n    }, []);\r\n\r\n    return (\r\n        <GridLayout\r\n            rows={1}\r\n            rowHeight={180}\r\n            breakpoints={[\r\n                { minWidth: 960, columns: 2, rows: 1, rowHeight: 180, gridGap: 20 },\r\n                { minWidth: 1280, columns: 3 }\r\n            ]}\r\n        >\r\n            <GridLayoutItem>\r\n                <TopTile\r\n                    id={categoryVsLastWeekTile.id}\r\n                    title=\"Top Category\"\r\n                    titleSubHeading={categoryVsLastWeekTile.name}\r\n                    requestStatus={categoryVsLastWeekRequestStatus}\r\n                    count={categoryVsLastWeekTile.count}\r\n                    countLabel={\r\n                        categoryVsLastWeekTile.count - categoryVsLastWeekTile.countLastWeek > 0\r\n                            ? `+${categoryVsLastWeekTile.count - categoryVsLastWeekTile.countLastWeek} this week`\r\n                            : categoryVsLastWeekTile.count - categoryVsLastWeekTile.countLastWeek < 0\r\n                            ? `${categoryVsLastWeekTile.count - categoryVsLastWeekTile.countLastWeek} this week`\r\n                            : 'No changes this week'\r\n                    }\r\n                    lastDate={categoryVsLastWeekTile.lastActionDate}\r\n                    color={\r\n                        categoryVsLastWeekTile.count > 10\r\n                            ? 'KermitGreen'\r\n                            : categoryVsLastWeekTile.count > 4\r\n                            ? 'PepOrange'\r\n                            : categoryVsLastWeekTile.count === 0\r\n                            ? 'ElmoRed'\r\n                            : 'UncleDeadlyGrey'\r\n                    }\r\n                />\r\n            </GridLayoutItem>\r\n            <GridLayoutItem>\r\n                <TopTile\r\n                    id={leastProductVsLastWeek.id}\r\n                    title=\"Least Product\"\r\n                    titleSubHeading={leastProductVsLastWeek.name}\r\n                    requestStatus={leastProductVsLastWeekRequestStatus}\r\n                    count={leastProductVsLastWeek.count}\r\n                    countLabel={\r\n                        leastProductVsLastWeek.count - leastProductVsLastWeek.countLastWeek > 0\r\n                            ? `+${leastProductVsLastWeek.count - leastProductVsLastWeek.countLastWeek} this week`\r\n                            : leastProductVsLastWeek.count - leastProductVsLastWeek.countLastWeek < 0\r\n                            ? `${leastProductVsLastWeek.count - leastProductVsLastWeek.countLastWeek} this week`\r\n                            : 'No changes this week'\r\n                    }\r\n                    lastDate={leastProductVsLastWeek.lastActionDate}\r\n                    color={\r\n                        leastProductVsLastWeek.count > 10\r\n                            ? 'KermitGreen'\r\n                            : leastProductVsLastWeek.count > 4\r\n                            ? 'PepOrange'\r\n                            : leastProductVsLastWeek.count > 0\r\n                            ? 'ElmoRed'\r\n                            : 'UncleDeadlyGrey'\r\n                    }\r\n                />\r\n            </GridLayoutItem>\r\n            <GridLayoutItem>\r\n                <FlexLayout justifyContent=\"center\">\r\n                    <FlexLayoutItem>\r\n                        {topQtyProducts.items && (\r\n                            <DoughnutChart\r\n                                data={topQtyProducts.items}\r\n                                dataKey=\"qty\"\r\n                                tooltip={item => (\r\n                                    <ChartTooltip>\r\n                                        <TypographyText size={10} color=\"StalerWhite\">\r\n                                            {item.name}\r\n                                        </TypographyText>\r\n\r\n                                        <TypographyText size={10} color=\"StalerWhite\">\r\n                                            {Math.round((item.qty * 100) / topQtyProducts.totalQty)}%\r\n                                        </TypographyText>\r\n                                    </ChartTooltip>\r\n                                )}\r\n                            >\r\n                                <TypographyText color=\"BeakerPink\" size={44} weight={700}>\r\n                                    {topQtyProducts.totalQty}\r\n                                </TypographyText>\r\n                                <TypographyText color=\"BeakerPink\" size={10} weight={700}>\r\n                                    PRODUCTS\r\n                                </TypographyText>\r\n                            </DoughnutChart>\r\n                        )}\r\n                    </FlexLayoutItem>\r\n                </FlexLayout>\r\n            </GridLayoutItem>\r\n        </GridLayout>\r\n    );\r\n};\r\n","import {\r\n    ContentLoadingSpinner,\r\n    DateFormat,\r\n    GridLayout,\r\n    GridLayoutItem,\r\n    ScrollableTileContent,\r\n    SearchResults,\r\n    SearchResultsCell,\r\n    SearchResultsRow,\r\n    Tile,\r\n    TileHeader,\r\n    TileTitle\r\n} from '@msamirtt/react-components';\r\nimport { useApiRequest } from '@msamirtt/react-infrastructure';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RecentIssuingsSupplyings } from './RecentIssuingsSupplyings';\r\n\r\nexport const RecentIssuingSupplyingContainer: React.FC = () => {\r\n    const history = useHistory();\r\n\r\n    const [recentIssuings, recentIssuingsActions, recentIssuingsRequestStatus] = useApiRequest<\r\n        RecentIssuingsSupplyings[]\r\n    >();\r\n\r\n    const [recentSupplyings, recentSupplyingsActions, recentSupplyingsRequestStatus] = useApiRequest<\r\n        RecentIssuingsSupplyings[]\r\n    >();\r\n\r\n    useEffect(() => {\r\n        recentIssuingsActions.makeRequest('GET', '/api/dashboard/recent-issuings');\r\n        recentSupplyingsActions.makeRequest('GET', '/api/dashboard/recent-supplyings');\r\n    }, []);\r\n\r\n    return (\r\n        <GridLayout\r\n            rows={2}\r\n            columns={1}\r\n            rowHeight={400}\r\n            breakpoints={[{ minWidth: 1280, columns: 2, rows: 1, gridGap: 20, rowHeight: 400 }]}\r\n        >\r\n            <GridLayoutItem>\r\n                <Tile>\r\n                    <TileHeader>\r\n                        <TileTitle>Recent Supplyings</TileTitle>\r\n                    </TileHeader>\r\n                    <ContentLoadingSpinner\r\n                        isLoading={recentSupplyingsRequestStatus.isPending}\r\n                        hasError={recentSupplyingsRequestStatus.hasError}\r\n                        errorMessage=\"Data not found!\"\r\n                    >\r\n                        <ScrollableTileContent bottom={10}>\r\n                            <SearchResults>\r\n                                {recentSupplyings?.map((item: RecentIssuingsSupplyings) => (\r\n                                    <SearchResultsRow\r\n                                        key={item.id}\r\n                                        id={item.id}\r\n                                        onClick={() => history.push(`/supplies/${item.id}`)}\r\n                                    >\r\n                                        <SearchResultsCell>{item.notes || 'Notes not provided.'}</SearchResultsCell>\r\n                                        <SearchResultsCell\r\n                                            width={100}\r\n                                        >{`Total Qty: ${item.totalQty}`}</SearchResultsCell>\r\n                                        <SearchResultsCell width={100}>\r\n                                            <DateFormat date={item.date.toString()} />\r\n                                        </SearchResultsCell>\r\n                                    </SearchResultsRow>\r\n                                ))}\r\n                            </SearchResults>\r\n                        </ScrollableTileContent>\r\n                    </ContentLoadingSpinner>\r\n                </Tile>\r\n            </GridLayoutItem>\r\n            <GridLayoutItem>\r\n                <Tile>\r\n                    <TileHeader>\r\n                        <TileTitle>Recent Issuings</TileTitle>\r\n                    </TileHeader>\r\n                    <ContentLoadingSpinner\r\n                        isLoading={recentIssuingsRequestStatus.isPending}\r\n                        hasError={recentIssuingsRequestStatus.hasError}\r\n                        errorMessage=\"Data not found!\"\r\n                    >\r\n                        <ScrollableTileContent bottom={10}>\r\n                            <SearchResults>\r\n                                {recentIssuings?.map((item: RecentIssuingsSupplyings) => (\r\n                                    <SearchResultsRow\r\n                                        key={item.id}\r\n                                        id={item.id}\r\n                                        onClick={() => history.push(`/issues/${item.id}`)}\r\n                                    >\r\n                                        <SearchResultsCell>{item.notes || 'Notes not provided.'}</SearchResultsCell>\r\n                                        <SearchResultsCell\r\n                                            width={100}\r\n                                        >{`Total Qty: ${item.totalQty}`}</SearchResultsCell>\r\n                                        <SearchResultsCell width={100}>\r\n                                            <DateFormat date={item.date.toString()} />\r\n                                        </SearchResultsCell>\r\n                                    </SearchResultsRow>\r\n                                ))}\r\n                            </SearchResults>\r\n                        </ScrollableTileContent>\r\n                    </ContentLoadingSpinner>\r\n                </Tile>\r\n            </GridLayoutItem>\r\n        </GridLayout>\r\n    );\r\n};\r\n","import { Page, PageHeader, PageHeaderRow, PageHeaderTitle, PageSection } from '@msamirtt/react-components';\r\nimport { useApiRequest } from '@msamirtt/react-infrastructure';\r\nimport React, { useEffect } from 'react';\r\nimport { DashboardTilesContainer } from './DashboardTilesContainer';\r\nimport { RecentIssuingSupplyingContainer } from './RecentIssuingsSupplyings/RecentIssuingsSupplyingsContainer';\r\n\r\nexport const DashboardContainer = () => {\r\n    const [logResult, logActions] = useApiRequest<string[]>();\r\n    useEffect(() => {\r\n        logActions.makeRequest('POST', `/api/dashboard/log`);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(logResult);\r\n    }, [logResult]);\r\n\r\n    /*\r\n    const [, logActions] = useApiRequest<string[]>();\r\n    useEffect(() => {\r\n        logActions.makeRequest('POST', `/api/dashboard/log?dateInfo=${new Date().toString()}`);\r\n    }, []);\r\n    */\r\n\r\n    return (\r\n        <Page>\r\n            <PageHeader>\r\n                <PageHeaderRow collapseAt={600}>\r\n                    <PageHeaderTitle>Dashboard</PageHeaderTitle>\r\n                </PageHeaderRow>\r\n            </PageHeader>\r\n            <PageSection>\r\n                <DashboardTilesContainer />\r\n            </PageSection>\r\n            <PageSection>\r\n                <RecentIssuingSupplyingContainer />\r\n            </PageSection>\r\n        </Page>\r\n    );\r\n};\r\n","import {\r\n    DraggableList,\r\n    ScrollableTileContent,\r\n    SearchResults,\r\n    SearchResultsCell,\r\n    SearchResultsRow,\r\n    Tile,\r\n    TileHeader,\r\n    TileTitle\r\n} from '@msamirtt/react-components';\r\nimport React, { useState } from 'react';\r\n\r\nexport const ExampleDraggableObjects: React.FC = () => {\r\n    const [items, setItems] = useState([\r\n        {\r\n            id: 63,\r\n            date: '2021-07-11T14:18:51.89',\r\n            notes: 'Lorem Ipsum is simply dummy text of the printing and typesetting #1',\r\n            totalQty: 1\r\n        },\r\n        {\r\n            id: 62,\r\n            date: '2021-07-11T14:17:45.691',\r\n            notes: 'Lorem Ipsum is simply dummy text of the printing and typesetting #2',\r\n            totalQty: 1\r\n        },\r\n        {\r\n            id: 61,\r\n            date: '2021-07-11T14:07:00',\r\n            notes: 'Lorem Ipsum is simply dummy text of the printing and typesetting #3',\r\n            totalQty: 1\r\n        },\r\n        {\r\n            id: 56,\r\n            date: '2021-07-11T13:47:36.779',\r\n            notes: 'Lorem Ipsum is simply dummy text of the printing and typesetting #4',\r\n            totalQty: 12\r\n        },\r\n        {\r\n            id: 54,\r\n            date: '2021-07-11T13:44:57.248',\r\n            notes: 'Lorem Ipsum is simply dummy text of the printing and typesetting #5',\r\n            totalQty: 5\r\n        }\r\n    ]);\r\n\r\n    const handleLog = (something: any) => console.log(something);\r\n    return (\r\n        <Tile minHeight={450}>\r\n            <TileHeader>\r\n                <TileTitle>Draggable Objects</TileTitle>\r\n            </TileHeader>\r\n            <ScrollableTileContent bottom={0}>\r\n                <SearchResults>\r\n                    <DraggableList\r\n                        id=\"MyDraggableList\"\r\n                        onOrderChange={setItems}\r\n                        items={items}\r\n                        renderItem={item => (\r\n                            <SearchResultsRow key={item.id} id={item.id} onClick={handleLog}>\r\n                                <SearchResultsCell>{item.notes || 'Notes not provided.'}</SearchResultsCell>\r\n                            </SearchResultsRow>\r\n                        )}\r\n                    />\r\n                </SearchResults>\r\n            </ScrollableTileContent>\r\n        </Tile>\r\n    );\r\n};\r\n","import * as Icons from '@material-ui/icons/';\r\nimport {\r\n    DateInput,\r\n    FieldGroup,\r\n    FlexLayout,\r\n    FlexLayoutItem,\r\n    Form,\r\n    FormFooter,\r\n    getFieldProps,\r\n    RadioGroup,\r\n    ScrollableTileContent,\r\n    Select,\r\n    TextArea,\r\n    TextField,\r\n    Tile,\r\n    TileHeader,\r\n    TileTitle,\r\n    TimeInput,\r\n    ToggleWithLabel\r\n} from '@msamirtt/react-components';\r\nimport { useFormik } from 'formik';\r\nimport React from 'react';\r\nimport * as yup from 'yup';\r\nimport { useFakeRequestStatus } from '../../Shared/Util/useFakeRequest';\r\n\r\nconst titles = ['Mr', 'Mrs', 'Miss', 'Dr', 'Ms', 'Prof', 'Rev', 'Lady', 'Sir', 'Mx', 'Misc', 'Ind', 'Mir'].map(x => ({\r\n    value: x,\r\n    label: x\r\n}));\r\n\r\nexport const ExampleForm = () => {\r\n    const { requestStatus, handleSubmit } = useFakeRequestStatus(true);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            hasConsent: false,\r\n            date: '',\r\n            time: '',\r\n            radio: ''\r\n        },\r\n        validationSchema: yup.object().shape({\r\n            title: yup.string().required('Required'),\r\n            firstName: yup.string().required('Required'),\r\n            lastName: yup.string().required('Required'),\r\n            email: yup\r\n                .string()\r\n                .required('Required')\r\n                .email('Invalid email'),\r\n            radio: yup.string().required('Required'),\r\n            date: yup.string().required('Required'),\r\n            time: yup.string().required('Required')\r\n        }),\r\n        onSubmit: handleSubmit\r\n    });\r\n\r\n    return (\r\n        <Tile height={500}>\r\n            <TileHeader>\r\n                <TileTitle>Forms</TileTitle>\r\n            </TileHeader>\r\n            <ScrollableTileContent bottom={10}>\r\n                <Form onSubmit={formik.handleSubmit}>\r\n                    <FieldGroup>\r\n                        <Select\r\n                            {...getFieldProps(formik, 'title')}\r\n                            data={titles}\r\n                            dataValue=\"value\"\r\n                            dataLabel=\"label\"\r\n                            sortAlphabetically={false}\r\n                            label=\"Title\"\r\n                            placeholder=\"Title\"\r\n                            marginTop={0}\r\n                            marginBottom={0}\r\n                        />\r\n\r\n                        <TextField\r\n                            {...getFieldProps(formik, 'firstName')}\r\n                            label=\"First Name\"\r\n                            placeholder=\"Patient's first name\"\r\n                            marginTop={0}\r\n                            marginBottom={0}\r\n                        />\r\n                        <TextField\r\n                            {...getFieldProps(formik, 'lastName')}\r\n                            label=\"Surname\"\r\n                            placeholder=\"Patient's surname\"\r\n                            marginTop={0}\r\n                            marginBottom={0}\r\n                        />\r\n                    </FieldGroup>\r\n                    <TextField\r\n                        {...getFieldProps(formik, 'email')}\r\n                        label=\"Email\"\r\n                        placeholder=\"Enter your email address\"\r\n                        iconLeft={<Icons.MailOutline htmlColor=\"#6a6a6a\" />}\r\n                    />\r\n                    <TextArea {...getFieldProps(formik, 'notes')} label=\"Item Notes\" />\r\n                    <FlexLayout>\r\n                        <FlexLayoutItem grow={1}>\r\n                            <DateInput\r\n                                {...getFieldProps(formik, 'date')}\r\n                                label=\"Date Field\"\r\n                                marginTop={0}\r\n                                marginBottom={0}\r\n                            />\r\n                        </FlexLayoutItem>\r\n                        <FlexLayoutItem width={110} marginLeft={10}>\r\n                            <TimeInput\r\n                                {...getFieldProps(formik, 'time')}\r\n                                label=\"Time Field\"\r\n                                marginTop={0}\r\n                                marginBottom={0}\r\n                            />\r\n                        </FlexLayoutItem>\r\n                    </FlexLayout>\r\n                    <ToggleWithLabel {...getFieldProps(formik, 'hasConsent')} label=\"Consent to something\" />\r\n                    <RadioGroup\r\n                        {...getFieldProps(formik, 'radio')}\r\n                        label=\"Some Radio Buttons\"\r\n                        values={[\r\n                            { value: 'yes', label: 'Yes' },\r\n                            { value: 'no', label: 'No' }\r\n                        ]}\r\n                    />\r\n                    <FormFooter\r\n                        entityId=\"id\"\r\n                        submitRequest={requestStatus}\r\n                        onCancel={() => {}}\r\n                        disableSubmit={!formik.isValid}\r\n                    />\r\n                </Form>\r\n            </ScrollableTileContent>{' '}\r\n        </Tile>\r\n    );\r\n};\r\n","import { useState } from 'react';\r\n\r\nexport function useFakeRequestStatus(pass = true) {\r\n    const [requestStatus, setRequestStatus] = useState({ isPending: false, hasError: false });\r\n\r\n    const handleSubmit = (value: any) => {\r\n        setRequestStatus({ isPending: true, hasError: false });\r\n        setTimeout(() => {\r\n            setRequestStatus({ isPending: false, hasError: !pass });\r\n        }, 1500);\r\n        console.log(value);\r\n    };\r\n\r\n    return { requestStatus, handleSubmit };\r\n}\r\n","import { Alert, Tab, Tabs, Tile, TileHeader, TileTitle } from '@msamirtt/react-components';\r\nimport React, { useState } from 'react';\r\n\r\nexport const ExampleTabsAlerts: React.FC = () => {\r\n    const [currentTab, setCurrentTab] = useState('item1');\r\n\r\n    return (\r\n        <Tile height={500}>\r\n            <TileHeader>\r\n                <TileTitle>Tabs</TileTitle>\r\n            </TileHeader>\r\n            <Tabs value={currentTab} onChange={setCurrentTab}>\r\n                <Tab value=\"item1\">Item 1</Tab>\r\n                <Tab value=\"item2\">Item 2</Tab>\r\n            </Tabs>\r\n            {currentTab === 'item1' && (\r\n                <Tile height={100} marginBottom={10}>\r\n                    <TileHeader>\r\n                        <TileTitle>First Tab</TileTitle>\r\n                    </TileHeader>\r\n                </Tile>\r\n            )}\r\n            {currentTab === 'item2' && (\r\n                <Tile height={100} marginBottom={10}>\r\n                    <TileHeader>\r\n                        <TileTitle>Second Tab</TileTitle>\r\n                    </TileHeader>\r\n                </Tile>\r\n            )}\r\n\r\n            <TileHeader>\r\n                <TileTitle>Alerts</TileTitle>\r\n            </TileHeader>\r\n            <Alert marginBottom={5} type=\"Error\">\r\n                Error Alert\r\n            </Alert>\r\n            <Alert marginBottom={5} type=\"Warning\">\r\n                Warning Alert\r\n            </Alert>\r\n            <Alert marginBottom={5} type=\"Info\">\r\n                Info Alert\r\n            </Alert>\r\n            <Alert marginBottom={5} type=\"Success\">\r\n                Success Alert\r\n            </Alert>\r\n        </Tile>\r\n    );\r\n};\r\n","import {\r\n    GridLayout,\r\n    GridLayoutItem,\r\n    LiveTableUpdates,\r\n    Page,\r\n    PageHeader,\r\n    PageHeaderRow,\r\n    PageHeaderTitle,\r\n    PageSection,\r\n    Tile\r\n} from '@msamirtt/react-components';\r\nimport React from 'react';\r\nimport { ExampleDraggableObjects } from './ExampleDraggableObjects';\r\nimport { ExampleForm } from './ExampleForm';\r\nimport { ExampleTabsAlerts } from './ExampleTabsAlerts';\r\n\r\nexport const ExampleContainer: React.FC = () => (\r\n    <Page>\r\n        <PageHeader>\r\n            <PageHeaderRow collapseAt={600}>\r\n                <PageHeaderTitle>Example Controls</PageHeaderTitle>\r\n            </PageHeaderRow>\r\n        </PageHeader>\r\n\r\n        <PageSection>\r\n            <GridLayout columns={4}>\r\n                <GridLayoutItem\r\n                    col={1}\r\n                    colSpan={4}\r\n                    row={1}\r\n                    breakpoints={[{ minWidth: 1400, col: 1, colSpan: 3, row: 1 }]}\r\n                >\r\n                    <Tile>\r\n                        <LiveTableUpdates />\r\n                    </Tile>\r\n                </GridLayoutItem>\r\n                <GridLayoutItem col={1} colSpan={4} row={2} breakpoints={[{ minWidth: 1400, col: 4, row: 1 }]}>\r\n                    <ExampleDraggableObjects />\r\n                </GridLayoutItem>\r\n                <GridLayoutItem\r\n                    col={1}\r\n                    colSpan={4}\r\n                    row={4}\r\n                    breakpoints={[\r\n                        { minWidth: 1400, col: 1, colSpan: 2, row: 2 },\r\n                        { minWidth: 1100, col: 1, colSpan: 2, row: 3 }\r\n                    ]}\r\n                >\r\n                    <ExampleTabsAlerts />\r\n                </GridLayoutItem>\r\n                <GridLayoutItem\r\n                    col={1}\r\n                    colSpan={4}\r\n                    row={5}\r\n                    breakpoints={[\r\n                        { minWidth: 1400, col: 3, colSpan: 2, row: 2 },\r\n                        { minWidth: 1100, col: 3, colSpan: 2, row: 3 }\r\n                    ]}\r\n                >\r\n                    <ExampleForm />\r\n                </GridLayoutItem>\r\n            </GridLayout>\r\n        </PageSection>\r\n    </Page>\r\n);\r\n","import { FiltersConfigItem } from '@msamirtt/react-components/dist/src/components/SearchAndFiltering/types/FiltersConfigItem';\r\n\r\nexport interface Issue {\r\n    id: string;\r\n    transactionNumber: string;\r\n    notes: string;\r\n    issueDate: Date;\r\n    issueDetails: IssueDetail[];\r\n}\r\n\r\nexport interface IssueDetail {\r\n    index?: number;\r\n    id?: string;\r\n    productId: string;\r\n    productName?: string;\r\n    quantity: string;\r\n}\r\n\r\nexport const filtersConfig: FiltersConfigItem[] = [\r\n    {\r\n        type: 'date-range',\r\n        label: 'Issue Date',\r\n        name: 'issueDateRange'\r\n    }\r\n];\r\n","import {\r\n    DateFormat,\r\n    LoadingButton,\r\n    PaginationAndSortingResponse,\r\n    PrimaryButton,\r\n    ResponsiveTable,\r\n    ResponsiveTableActions,\r\n    ResponsiveTableBody,\r\n    ResponsiveTableCell,\r\n    ResponsiveTableFooter,\r\n    ResponsiveTableHeaderCell,\r\n    ResponsiveTableHeaderRow,\r\n    ResponsiveTablePagination,\r\n    ResponsiveTableRow,\r\n    ResponsiveTableRowActions,\r\n    SecondaryButton\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus, SelectableItem, UseSelectableItemsResponse } from '@msamirtt/react-infrastructure';\r\nimport React from 'react';\r\nimport { Issue } from './Issue';\r\n\r\ninterface Props {\r\n    items: SelectableItem<Issue>[];\r\n    paginationSorting: PaginationAndSortingResponse;\r\n    selectable: UseSelectableItemsResponse<Issue>;\r\n    totalResults: number;\r\n    fetchtStatus: RequestStatus;\r\n    deleteStatus: RequestStatus;\r\n    onCreate: () => void;\r\n    onEdit: (entity: any) => void;\r\n    onDelete: () => void;\r\n}\r\n\r\nexport const IssuesTable: React.FC<Props> = ({\r\n    items,\r\n    paginationSorting,\r\n    selectable,\r\n    totalResults,\r\n    fetchtStatus,\r\n    deleteStatus,\r\n    onCreate,\r\n    onEdit,\r\n    onDelete\r\n}) => (\r\n    <ResponsiveTable\r\n        id=\"issue-table\"\r\n        collapseAt={600}\r\n        sortParams={paginationSorting.sort}\r\n        onSort={paginationSorting.setSort}\r\n        isLoading={fetchtStatus.isPending && !fetchtStatus.hasInitialResponse}\r\n        isUpdating={fetchtStatus.isPending && fetchtStatus.hasInitialResponse}\r\n        hasError={fetchtStatus.hasError}\r\n        hasSelectableItems\r\n        onSelectAll={selectable.selectAllItems}\r\n        allItemsSelected={selectable.allItemsSelected}\r\n    >\r\n        <ResponsiveTableHeaderRow>\r\n            <ResponsiveTableHeaderCell sortField=\"transactionNumber\">#</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell sortField=\"issueDate\">Issue Date</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell width=\"60%\" sortField=\"notes\">\r\n                Notes\r\n            </ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell />\r\n        </ResponsiveTableHeaderRow>\r\n\r\n        <ResponsiveTableBody>\r\n            {items.map((item: SelectableItem<Issue>) => (\r\n                <ResponsiveTableRow\r\n                    key={item.id}\r\n                    onSelected={selectable.setSelectedItem}\r\n                    rowId={item.id}\r\n                    selected={item._selected}\r\n                >\r\n                    <ResponsiveTableCell>{item.transactionNumber}</ResponsiveTableCell>\r\n                    <ResponsiveTableCell promoteToHeaderOnMobile>\r\n                        <DateFormat date={item.issueDate.toString()} />\r\n                    </ResponsiveTableCell>\r\n                    <ResponsiveTableCell>{item.notes}</ResponsiveTableCell>\r\n\r\n                    <ResponsiveTableRowActions>\r\n                        <SecondaryButton id=\"Edit\" size=\"small\" onClick={() => onEdit(item)}>\r\n                            Edit\r\n                        </SecondaryButton>\r\n                    </ResponsiveTableRowActions>\r\n                </ResponsiveTableRow>\r\n            ))}\r\n        </ResponsiveTableBody>\r\n\r\n        <ResponsiveTableFooter>\r\n            <ResponsiveTablePagination\r\n                onPageChange={paginationSorting.setPage}\r\n                page={paginationSorting.page}\r\n                rowsPerPage={paginationSorting.rowsPerPage}\r\n                totalResults={totalResults}\r\n                onRowsPerPageChange={paginationSorting.setRowsPerPage}\r\n                rowsPerPageOptions={[5, 10, 20]}\r\n                showRowsPerPageSelect={true}\r\n            />\r\n            <ResponsiveTableActions>\r\n                <LoadingButton\r\n                    id=\"deleteAction\"\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    requestStatus={deleteStatus}\r\n                    onClick={onDelete}\r\n                >\r\n                    Delete\r\n                </LoadingButton>\r\n                <PrimaryButton id=\"primaryAction\" onClick={onCreate}>\r\n                    New Entry\r\n                </PrimaryButton>\r\n            </ResponsiveTableActions>\r\n        </ResponsiveTableFooter>\r\n    </ResponsiveTable>\r\n);\r\n","import {\r\n    Filters,\r\n    FilterValues,\r\n    Page,\r\n    PageHeader,\r\n    PageHeaderRow,\r\n    PageHeaderTitle,\r\n    PageSection,\r\n    SearchAndFiltersLayout,\r\n    SearchInput,\r\n    SearchSummary,\r\n    usePaginationAndSorting\r\n} from '@msamirtt/react-components';\r\nimport { useApiRequest, useSelectableItems } from '@msamirtt/react-infrastructure';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { filtersConfig, Issue } from './Issue';\r\nimport { IssuesTable } from './IssuesTable';\r\n\r\nexport const IssuesContainer = () => {\r\n    const history = useHistory();\r\n    const paginationSorting = usePaginationAndSorting({\r\n        defaultSortField: 'issueDate',\r\n        defaultSortDirection: 'desc'\r\n    });\r\n\r\n    const [items, { makeRequest }, fetchtStatus, { totalResults }] = useApiRequest<Issue[]>();\r\n    const [, deleteAction, deleteRequestStatus] = useApiRequest({\r\n        onSuccess: () => fetch()\r\n    });\r\n\r\n    const selectable = useSelectableItems(items);\r\n    const [filterValues, setFilterValues] = useState<FilterValues>({\r\n        issueDateRange: { from: '', to: '' },\r\n        searchText: ''\r\n    });\r\n\r\n    const fetch = useCallback(() => {\r\n        makeRequest('POST', `/api/issues/get`, {\r\n            page: paginationSorting.page,\r\n            pageSize: paginationSorting.rowsPerPage,\r\n            orderBy: paginationSorting.sort.field,\r\n            sortDirection: paginationSorting.sort.direction,\r\n            filter: {\r\n                searchText: filterValues.searchText,\r\n                issueDateTo: filterValues.issueDateRange.to,\r\n                issueDateFrom: filterValues.issueDateRange.from\r\n            }\r\n        });\r\n    }, [paginationSorting.paginationSortingQuery, filterValues, makeRequest]);\r\n\r\n    useEffect(() => {\r\n        fetch();\r\n    }, [paginationSorting.paginationSortingQuery, filterValues]);\r\n\r\n    const handleOnSearch = useCallback(\r\n        (searchText: string) => {\r\n            setFilterValues({ ...filterValues, searchText: searchText });\r\n            paginationSorting.setPage(0);\r\n        },\r\n        [filterValues]\r\n    );\r\n\r\n    const handleOnCreate = useCallback(() => {\r\n        history.push('issues/new');\r\n    }, []);\r\n\r\n    const handleOnEdit = useCallback((entity: Issue) => {\r\n        history.push(`issues/${entity.id}`);\r\n    }, []);\r\n\r\n    const handleOnDelete = useCallback(() => {\r\n        selectable.selectedIds.forEach(id => {\r\n            deleteAction.makeRequest('DELETE', `/api/issues/${id}`);\r\n        });\r\n    }, [selectable, deleteAction.makeRequest]);\r\n\r\n    return (\r\n        <Page>\r\n            <PageHeader>\r\n                <PageHeaderRow collapseAt={600}>\r\n                    <PageHeaderTitle>Issues</PageHeaderTitle>\r\n                </PageHeaderRow>\r\n            </PageHeader>\r\n            <PageSection>\r\n                <SearchAndFiltersLayout\r\n                    search={<SearchInput name=\"search-field\" placeholder=\"Search\" onSearch={handleOnSearch} />}\r\n                    filters={<Filters config={filtersConfig} values={filterValues} onChange={setFilterValues} />}\r\n                />\r\n                <SearchSummary\r\n                    filtersConfig={filtersConfig}\r\n                    filterValues={filterValues}\r\n                    onFiltersChange={setFilterValues}\r\n                    searchTerm={filterValues.searchText}\r\n                    onSearchChange={handleOnSearch}\r\n                />\r\n                <IssuesTable\r\n                    items={selectable.selectableItems}\r\n                    paginationSorting={paginationSorting}\r\n                    selectable={selectable}\r\n                    totalResults={totalResults}\r\n                    fetchtStatus={fetchtStatus}\r\n                    deleteStatus={deleteRequestStatus}\r\n                    onCreate={handleOnCreate}\r\n                    onEdit={handleOnEdit}\r\n                    onDelete={handleOnDelete}\r\n                />\r\n            </PageSection>\r\n        </Page>\r\n    );\r\n};\r\n","import { useCallback } from 'react';\r\n\r\nexport function useLocalCrud<T, TDetail extends { index?: number }>(\r\n    editingEntity: T | undefined,\r\n    setEditingEntity: (editingDetail: T | undefined) => void,\r\n    editingDetails: TDetail[] | undefined,\r\n    setEditingDetail: (editingDetail: TDetail | undefined) => void,\r\n    editingDetailsName: string\r\n) {\r\n    const onCreateDetail = useCallback((detailDefaultValue: TDetail) => {\r\n        setEditingDetail({ ...detailDefaultValue });\r\n    }, []);\r\n\r\n    const onEditDetail = useCallback((editingDetail: TDetail) => {\r\n        setEditingDetail(editingDetail);\r\n    }, []);\r\n\r\n    const onConfirmDetail = useCallback(\r\n        (value: TDetail) => {\r\n            if (editingEntity) {\r\n                if (value.index !== undefined) {\r\n                    editingDetails![value.index] = { ...value };\r\n                } else {\r\n                    setEditingEntity({\r\n                        ...editingEntity,\r\n                        [editingDetailsName]: [\r\n                            ...editingDetails!.filter(obj => obj.index !== value.index),\r\n                            { ...value }\r\n                        ].map((x, index) => ({ ...x, index: index }))\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        [editingEntity, editingDetails, setEditingEntity, editingDetailsName]\r\n    );\r\n\r\n    const onDeleteDetail = useCallback(\r\n        (index: number) => {\r\n            if (editingEntity) {\r\n                const newArr = editingDetails!.slice();\r\n                newArr.splice(index, 1);\r\n                setEditingEntity({ ...editingEntity, [editingDetailsName]: newArr });\r\n            }\r\n        },\r\n        [editingEntity, editingDetails, setEditingEntity]\r\n    );\r\n\r\n    return { onCreateDetail, onEditDetail, onDeleteDetail, onConfirmDetail };\r\n}\r\n","import { FieldGroup, Form, FormFooter, getFieldProps, Select, TextField } from '@msamirtt/react-components';\r\nimport { useFormik } from 'formik';\r\nimport React, { useCallback } from 'react';\r\nimport * as yup from 'yup';\r\nimport { Lookup } from '../../../Shared/Lookup';\r\nimport { IssueDetail } from '../Issue';\r\n\r\ninterface Props {\r\n    entity: IssueDetail | undefined;\r\n    onSubmit: (value: IssueDetail) => void;\r\n    onCancel: () => void;\r\n    productLookup: Lookup[];\r\n}\r\n\r\nexport const IssueDetailsForm: React.FC<Props> = ({ entity, onSubmit, onCancel, productLookup }) => {\r\n    const handleOnSubmit = useCallback(\r\n        (value: any) => {\r\n            const productName = productLookup.find(x => x.id === value.productId)?.name;\r\n            onSubmit({ ...value, productName: productName });\r\n        },\r\n        [onSubmit]\r\n    );\r\n\r\n    const formik = useFormik({\r\n        initialValues: { ...entity },\r\n        validationSchema: yup.object().shape({\r\n            productId: yup.number().required('Required'),\r\n            quantity: yup\r\n                .number()\r\n                .required('Required')\r\n                .positive('Must be positive value')\r\n        }),\r\n        validateOnMount: false,\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        onSubmit: handleOnSubmit\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n            <FieldGroup>\r\n                <Select\r\n                    {...getFieldProps(formik, 'productId')}\r\n                    data={productLookup}\r\n                    dataValue=\"id\"\r\n                    dataLabel=\"name\"\r\n                    sortAlphabetically={true}\r\n                    label=\"Product\"\r\n                    marginTop={0}\r\n                    marginBottom={0}\r\n                />\r\n                <TextField\r\n                    {...getFieldProps(formik, 'quantity')}\r\n                    type=\"number\"\r\n                    label=\"Quantity\"\r\n                    marginTop={0}\r\n                    marginBottom={0}\r\n                />\r\n            </FieldGroup>\r\n            <FormFooter entityId=\"id\" submitRequest={undefined} onCancel={onCancel} disableSubmit={!formik.isValid} />\r\n        </Form>\r\n    );\r\n};\r\n","import {\r\n    PrimaryButton,\r\n    ResponsiveTable,\r\n    ResponsiveTableActions,\r\n    ResponsiveTableBody,\r\n    ResponsiveTableCell,\r\n    ResponsiveTableFooter,\r\n    ResponsiveTableHeaderCell,\r\n    ResponsiveTableHeaderRow,\r\n    ResponsiveTableRow,\r\n    ResponsiveTableRowActions,\r\n    SecondaryButton\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus } from '@msamirtt/react-infrastructure';\r\nimport React from 'react';\r\nimport { IssueDetail } from '../Issue';\r\n\r\ninterface Props {\r\n    items: IssueDetail[] | undefined;\r\n    totalResults: number;\r\n    fetchtStatus: RequestStatus;\r\n    deleteStatus: RequestStatus;\r\n    onCreate: () => void;\r\n    onEdit: (entity: any) => void;\r\n    onDelete: (index: number) => void;\r\n}\r\n\r\nexport const IssueDetailsTable: React.FC<Props> = ({ items, onCreate, onEdit, onDelete }) => (\r\n    <ResponsiveTable id=\"issue-details-table\" collapseAt={600}>\r\n        <ResponsiveTableHeaderRow>\r\n            <ResponsiveTableHeaderCell sortField=\"productName\">Product Name</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell width={400} sortField=\"quantity\">\r\n                Qty\r\n            </ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell />\r\n        </ResponsiveTableHeaderRow>\r\n\r\n        <ResponsiveTableBody>\r\n            {items?.map((item: IssueDetail, index) => (\r\n                <ResponsiveTableRow key={index}>\r\n                    <ResponsiveTableCell>{item.productName}</ResponsiveTableCell>\r\n                    <ResponsiveTableCell>{item.quantity}</ResponsiveTableCell>\r\n\r\n                    <ResponsiveTableRowActions>\r\n                        <SecondaryButton id={`Edit-${index}`} size=\"small\" onClick={() => onEdit(item)}>\r\n                            Edit\r\n                        </SecondaryButton>\r\n                        <SecondaryButton\r\n                            color=\"secondary\"\r\n                            id={`Delete-${index}`}\r\n                            size=\"small\"\r\n                            onClick={() => onDelete(index)}\r\n                        >\r\n                            Delete\r\n                        </SecondaryButton>\r\n                    </ResponsiveTableRowActions>\r\n                </ResponsiveTableRow>\r\n            ))}\r\n        </ResponsiveTableBody>\r\n\r\n        <ResponsiveTableFooter alignRight>\r\n            <ResponsiveTableActions>\r\n                <PrimaryButton id=\"primaryAction\" onClick={onCreate} type=\"button\">\r\n                    New Entry\r\n                </PrimaryButton>\r\n            </ResponsiveTableActions>\r\n        </ResponsiveTableFooter>\r\n    </ResponsiveTable>\r\n);\r\n","import {\r\n    DateTimeInput,\r\n    FieldGroup,\r\n    Form,\r\n    FormFooter,\r\n    getFieldProps,\r\n    TextArea,\r\n    TextField,\r\n    Tile\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus } from '@msamirtt/react-infrastructure';\r\nimport { useFormik } from 'formik';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport * as yup from 'yup';\r\nimport { Issue } from '../Issue';\r\n\r\ninterface Props {\r\n    entity: Issue | undefined;\r\n    onSubmit: (value: Issue) => void;\r\n    onCancel: () => void;\r\n    requestStatus: RequestStatus;\r\n    children: any;\r\n}\r\n\r\nexport const IssuesForm: React.FC<Props> = ({ entity, onSubmit, onCancel, requestStatus, children }) => {\r\n    const handleOnSubmit = useCallback(\r\n        (value: any) => {\r\n            onSubmit(value);\r\n        },\r\n        [onSubmit]\r\n    );\r\n\r\n    // update formik when issueDetails changes\r\n    useEffect(() => {\r\n        formik.setValues({ ...formik.values, issueDetails: entity?.issueDetails });\r\n    }, [entity]);\r\n\r\n    const formik = useFormik({\r\n        initialValues: { ...entity },\r\n        validationSchema: yup.object().shape({\r\n            issueDate: yup.date().required('Required'),\r\n            transactionNumber: yup.number().required('Required'),\r\n            issueDetails: yup.array().min(1, 'Must have 1 item')\r\n        }),\r\n        validateOnMount: false,\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        onSubmit: handleOnSubmit\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n            <Tile marginBottom={10}>\r\n                <FieldGroup marginTop={0} marginBottom={0}>\r\n                    <DateTimeInput\r\n                        {...getFieldProps(formik, 'issueDate')}\r\n                        label=\"Issue Date\"\r\n                        showTime={true}\r\n                        clearable={true}\r\n                        marginBottom={0}\r\n                    />\r\n                    <TextField\r\n                        {...getFieldProps(formik, 'transactionNumber')}\r\n                        type=\"number\"\r\n                        label=\"Transaction Number\"\r\n                        marginBottom={0}\r\n                    />\r\n                </FieldGroup>\r\n                <TextArea {...getFieldProps(formik, 'notes')} label=\"Notes\" />\r\n            </Tile>\r\n\r\n            {children}\r\n\r\n            <FormFooter\r\n                entityId=\"id\"\r\n                submitRequest={requestStatus}\r\n                onCancel={onCancel}\r\n                disableSubmit={!formik.isValid}\r\n            />\r\n        </Form>\r\n    );\r\n};\r\n","import {\r\n    ContentLoadingSpinner,\r\n    Modal,\r\n    Page,\r\n    PageHeader,\r\n    PageHeaderRow,\r\n    PageHeaderTitle,\r\n    PageSection\r\n} from '@msamirtt/react-components';\r\nimport { useApiRequest, useBooleanState, useCrudOperations } from '@msamirtt/react-infrastructure';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { Lookup } from '../../../Shared/Lookup';\r\nimport { useLocalCrud } from '../../../Shared/Util/useLocalCrud';\r\nimport { Issue, IssueDetail } from '../Issue';\r\nimport { IssueDetailsForm } from './IssueDetailsForm';\r\nimport { IssueDetailsTable } from './IssueDetailsTable';\r\nimport { IssuesForm } from './IssuesForm';\r\n\r\nexport const IssuesFormContainer = () => {\r\n    /* \r\n        Header/Detail hacks\r\n        1-detail items should have index\r\n        2-Fetch if url ends with /id\r\n    */\r\n    const history = useHistory();\r\n    const { id } = useParams<{ id: string }>();\r\n    const [showFormModal, setShowFormModal, setHideFormModal] = useBooleanState(false);\r\n    const [editingEntity, setEditingEntity] = useState<Issue>();\r\n    const [editingDetail, setEditingDetail] = useState<IssueDetail>();\r\n    const [productLookup, productLookupAction, productRequestStatus] = useApiRequest<Lookup[]>();\r\n\r\n    const [, { makeRequest }, fetchtStatus] = useApiRequest<Issue>({\r\n        onSuccess: (_, item) =>\r\n            setEditingEntity({ ...item!, issueDetails: item!.issueDetails.map((x, i) => ({ ...x, index: i })) })\r\n        //hack#1: set index for each item\r\n    });\r\n\r\n    const [, actions, status, { totalResults }] = useCrudOperations<Issue>('/api/issues', 'channel', {\r\n        onCreateSuccess: () => history.push('/issues'),\r\n        onUpdateSuccess: () => history.push('/issues'),\r\n        onDeleteSuccess: () => history.push('/issues')\r\n    });\r\n\r\n    const fetchIssue = useCallback((id: string) => makeRequest('GET', `/api/issues/${id}`), [makeRequest]);\r\n    const fetchProductLookup = useCallback(() => {\r\n        productLookupAction.makeRequest('GET', `/api/products/lookup`);\r\n    }, [productLookupAction.makeRequest]);\r\n\r\n    // Header\r\n    const handleOnSubmit = useCallback(\r\n        (value: Issue) => {\r\n            actions.update(value);\r\n        },\r\n        [actions]\r\n    );\r\n\r\n    const handleOnCancel = useCallback(() => history.push('/issues'), []);\r\n\r\n    // Detail\r\n    const { onCreateDetail, onEditDetail, onDeleteDetail, onConfirmDetail } = useLocalCrud(\r\n        editingEntity,\r\n        setEditingEntity,\r\n        editingEntity?.issueDetails,\r\n        setEditingDetail,\r\n        'issueDetails'\r\n    );\r\n\r\n    const handleOnCreateDetail = useCallback(() => {\r\n        onCreateDetail({\r\n            id: undefined,\r\n            productId: '',\r\n            quantity: '',\r\n            index: undefined\r\n        });\r\n        setShowFormModal();\r\n    }, [onCreateDetail]);\r\n\r\n    const handleOnEditDetail = useCallback(\r\n        (entity: IssueDetail) => {\r\n            onEditDetail(entity);\r\n            setShowFormModal();\r\n        },\r\n        [onEditDetail]\r\n    );\r\n\r\n    const handleOnConfirmDetail = useCallback(\r\n        (value: IssueDetail) => {\r\n            onConfirmDetail(value);\r\n            setHideFormModal();\r\n        },\r\n        [onConfirmDetail]\r\n    );\r\n\r\n    const handleOnDeleteDetail = useCallback(\r\n        (index: number) => {\r\n            onDeleteDetail(index);\r\n        },\r\n        [onDeleteDetail]\r\n    );\r\n\r\n    // hack#2 Fetch if url ends with /id\r\n    // or set default values for new entity.\r\n    useEffect(() => {\r\n        if (parseInt(id) > 0) {\r\n            fetchIssue(id);\r\n        } else {\r\n            setEditingEntity({\r\n                id: '',\r\n                issueDate: new Date(),\r\n                notes: '',\r\n                transactionNumber: '',\r\n                issueDetails: []\r\n            });\r\n        }\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        fetchProductLookup();\r\n    }, []);\r\n\r\n    return (\r\n        <Page>\r\n            <PageHeader>\r\n                <PageHeaderRow collapseAt={600}>\r\n                    <PageHeaderTitle>{editingEntity?.id ? `Issue - #${editingEntity.id}` : 'Issue'}</PageHeaderTitle>\r\n                </PageHeaderRow>\r\n            </PageHeader>\r\n            <PageSection>\r\n                <ContentLoadingSpinner\r\n                    isLoading={fetchtStatus.isPending || productRequestStatus.isPending}\r\n                    hasError={fetchtStatus.hasError || productRequestStatus.hasError}\r\n                    errorMessage=\"Issue or Products not found!\"\r\n                    top={100}\r\n                >\r\n                    {editingEntity && (\r\n                        <IssuesForm\r\n                            onSubmit={handleOnSubmit}\r\n                            onCancel={handleOnCancel}\r\n                            entity={editingEntity}\r\n                            requestStatus={status.update}\r\n                        >\r\n                            <IssueDetailsTable\r\n                                items={editingEntity?.issueDetails}\r\n                                totalResults={totalResults}\r\n                                fetchtStatus={status.read}\r\n                                deleteStatus={status.delete}\r\n                                onCreate={handleOnCreateDetail}\r\n                                onEdit={handleOnEditDetail}\r\n                                onDelete={handleOnDeleteDetail}\r\n                            />\r\n                            <Modal onCancel={setHideFormModal} open={showFormModal} title=\"Form\" width={700}>\r\n                                <IssueDetailsForm\r\n                                    entity={editingDetail}\r\n                                    productLookup={productLookup}\r\n                                    onCancel={setHideFormModal}\r\n                                    onSubmit={handleOnConfirmDetail}\r\n                                />\r\n                            </Modal>\r\n                        </IssuesForm>\r\n                    )}\r\n                </ContentLoadingSpinner>\r\n            </PageSection>\r\n        </Page>\r\n    );\r\n};\r\n","import {\r\n    FieldGroup,\r\n    Form,\r\n    FormFooter,\r\n    getFieldProps,\r\n    Image,\r\n    Select,\r\n    TextArea,\r\n    TextField\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus } from '@msamirtt/react-infrastructure';\r\nimport { useFormik } from 'formik';\r\nimport React, { useCallback } from 'react';\r\nimport * as yup from 'yup';\r\nimport { Lookup } from '../../Shared/Lookup';\r\n\r\ninterface Props {\r\n    entity: any;\r\n    onSubmit: (value: any) => void;\r\n    onCancel: () => void;\r\n    requestStatus: RequestStatus;\r\n    categoryLookup: Lookup[];\r\n}\r\n\r\nexport const ProductsForm: React.FC<Props> = ({ entity, onSubmit, onCancel, requestStatus, categoryLookup }) => {\r\n    const handleOnSubmit = useCallback(\r\n        (value: any) => {\r\n            onSubmit(value);\r\n        },\r\n        [onSubmit]\r\n    );\r\n\r\n    const formik = useFormik({\r\n        initialValues: { ...entity },\r\n        validationSchema: yup.object().shape({\r\n            name: yup.string().required('Required'),\r\n            thumbnail: yup.string().required('Required')\r\n        }),\r\n        validateOnMount: false,\r\n        validateOnBlur: true,\r\n        validateOnChange: false,\r\n        onSubmit: handleOnSubmit\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n            <FieldGroup>\r\n                <TextField\r\n                    {...getFieldProps(formik, 'name')}\r\n                    label=\"Product Name\"\r\n                    placeholder=\"Enter a name\"\r\n                    marginTop={0}\r\n                    marginBottom={0}\r\n                />\r\n                <Select\r\n                    {...getFieldProps(formik, 'categoryId')}\r\n                    data={categoryLookup}\r\n                    dataValue=\"id\"\r\n                    dataLabel=\"name\"\r\n                    sortAlphabetically={true}\r\n                    label=\"Category\"\r\n                    marginTop={0}\r\n                    marginBottom={0}\r\n                />\r\n            </FieldGroup>\r\n            <TextArea {...getFieldProps(formik, 'description')} label=\"Description\" />\r\n            <TextField {...getFieldProps(formik, 'thumbnail')} label=\"Thumbnail\" />\r\n            <Image src={formik.values.thumbnail} alt=\"\" width={300} center />\r\n\r\n            <FormFooter\r\n                entityId=\"id\"\r\n                submitRequest={requestStatus}\r\n                onCancel={onCancel}\r\n                disableSubmit={!formik.isValid}\r\n            />\r\n        </Form>\r\n    );\r\n};\r\n","import {\r\n    Image,\r\n    LoadingButton,\r\n    PaginationAndSortingResponse,\r\n    PrimaryButton,\r\n    ResponsiveTable,\r\n    ResponsiveTableActions,\r\n    ResponsiveTableBody,\r\n    ResponsiveTableCell,\r\n    ResponsiveTableFooter,\r\n    ResponsiveTableHeaderCell,\r\n    ResponsiveTableHeaderRow,\r\n    ResponsiveTablePagination,\r\n    ResponsiveTableRow,\r\n    ResponsiveTableRowActions,\r\n    SecondaryButton\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus, SelectableItem, UseSelectableItemsResponse } from '@msamirtt/react-infrastructure';\r\nimport React from 'react';\r\nimport { Product } from './Product';\r\n\r\ninterface Props {\r\n    items: SelectableItem<Product>[];\r\n    paginationSorting: PaginationAndSortingResponse;\r\n    selectable: UseSelectableItemsResponse<Product>;\r\n    totalResults: number;\r\n    fetchtStatus: RequestStatus;\r\n    deleteStatus: RequestStatus;\r\n    onCreate: () => void;\r\n    onEdit: (entity: any) => void;\r\n    onDelete: () => void;\r\n}\r\n\r\nexport const ProductsTable: React.FC<Props> = ({\r\n    items,\r\n    paginationSorting,\r\n    selectable,\r\n    totalResults,\r\n    fetchtStatus,\r\n    deleteStatus,\r\n    onCreate,\r\n    onEdit,\r\n    onDelete\r\n}) => (\r\n    <ResponsiveTable\r\n        id=\"products-table\"\r\n        collapseAt={600}\r\n        sortParams={paginationSorting.sort}\r\n        onSort={paginationSorting.setSort}\r\n        isLoading={fetchtStatus.isPending && !fetchtStatus.hasInitialResponse}\r\n        isUpdating={fetchtStatus.isPending && fetchtStatus.hasInitialResponse}\r\n        hasError={fetchtStatus.hasError}\r\n        hasSelectableItems\r\n        onSelectAll={selectable.selectAllItems}\r\n        allItemsSelected={selectable.allItemsSelected}\r\n    >\r\n        <ResponsiveTableHeaderRow>\r\n            <ResponsiveTableHeaderCell width={80} />\r\n            <ResponsiveTableHeaderCell sortField=\"name\">Name</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell sortField=\"categoryName\">Category</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell width=\"50%\" sortField=\"description\">\r\n                Description\r\n            </ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell sortField=\"quantity\">Total Qty</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell />\r\n        </ResponsiveTableHeaderRow>\r\n\r\n        <ResponsiveTableBody>\r\n            {items.map((item: SelectableItem<Product>) => (\r\n                <ResponsiveTableRow\r\n                    key={item.id}\r\n                    onSelected={selectable.setSelectedItem}\r\n                    rowId={item.id}\r\n                    selected={item._selected}\r\n                >\r\n                    <ResponsiveTableCell fullWidthOnMobile rowOnMobile={1}>\r\n                        {item.thumbnail && <Image src={item.thumbnail} alt=\"\" width={80} height={80} center />}\r\n                    </ResponsiveTableCell>\r\n                    <ResponsiveTableCell promoteToHeaderOnMobile>{item.name}</ResponsiveTableCell>\r\n                    <ResponsiveTableCell>{item.categoryName}</ResponsiveTableCell>\r\n                    <ResponsiveTableCell fullWidthOnMobile _isInLastRow>\r\n                        {item.description}\r\n                    </ResponsiveTableCell>\r\n                    <ResponsiveTableCell>{item.quantity}</ResponsiveTableCell>\r\n\r\n                    <ResponsiveTableRowActions>\r\n                        <SecondaryButton id=\"Edit\" size=\"small\" onClick={() => onEdit(item)}>\r\n                            Edit\r\n                        </SecondaryButton>\r\n                    </ResponsiveTableRowActions>\r\n                </ResponsiveTableRow>\r\n            ))}\r\n        </ResponsiveTableBody>\r\n\r\n        <ResponsiveTableFooter>\r\n            <ResponsiveTablePagination\r\n                onPageChange={paginationSorting.setPage}\r\n                page={paginationSorting.page}\r\n                rowsPerPage={paginationSorting.rowsPerPage}\r\n                totalResults={totalResults}\r\n                onRowsPerPageChange={paginationSorting.setRowsPerPage}\r\n                rowsPerPageOptions={[5, 10, 20]}\r\n                showRowsPerPageSelect={true}\r\n            />\r\n            <ResponsiveTableActions>\r\n                <LoadingButton\r\n                    id=\"deleteAction\"\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    requestStatus={deleteStatus}\r\n                    onClick={onDelete}\r\n                >\r\n                    Delete\r\n                </LoadingButton>\r\n                <PrimaryButton id=\"primaryAction\" onClick={onCreate}>\r\n                    New Entry\r\n                </PrimaryButton>\r\n            </ResponsiveTableActions>\r\n        </ResponsiveTableFooter>\r\n    </ResponsiveTable>\r\n);\r\n","import {\r\n    FilterValues,\r\n    FlexLayout,\r\n    FlexLayoutItem,\r\n    Modal,\r\n    Page,\r\n    PageHeader,\r\n    PageHeaderRow,\r\n    PageHeaderTitle,\r\n    PageSection,\r\n    SearchInput,\r\n    usePaginationAndSorting\r\n} from '@msamirtt/react-components';\r\nimport { useApiRequest, useBooleanState, useCrudOperations, useSelectableItems } from '@msamirtt/react-infrastructure';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { Lookup } from '../../Shared/Lookup';\r\nimport { Product } from './Product';\r\nimport { ProductsForm } from './ProductsForm';\r\nimport { ProductsTable } from './ProductsTable';\r\n\r\nexport const ProductsContainer = () => {\r\n    const [showFormModal, setShowFormModal, setHideFormModal] = useBooleanState(false);\r\n    const [editingEntity, setEditingEntity] = useState<Product>();\r\n    const paginationSorting = usePaginationAndSorting({\r\n        defaultSortField: 'name',\r\n        defaultSortDirection: 'asc'\r\n    });\r\n\r\n    const [items, actions, status, { totalResults }] = useCrudOperations<Product>('/api/products', 'channel', {\r\n        onCreateSuccess: () => {\r\n            setHideFormModal();\r\n            fetch();\r\n        },\r\n        onUpdateSuccess: () => {\r\n            setHideFormModal();\r\n            fetch();\r\n        },\r\n        onDeleteSuccess: () => fetch()\r\n    });\r\n\r\n    const [categoryLookup, categoryLookupAction] = useApiRequest<Lookup[]>();\r\n\r\n    const fetchCategoryLookup = useCallback(() => {\r\n        categoryLookupAction.makeRequest('GET', `/api/categories/lookup`);\r\n    }, [categoryLookupAction.makeRequest]);\r\n\r\n    const selectable = useSelectableItems(items);\r\n    const [filterValues, setFilterValues] = useState<FilterValues>({\r\n        searchText: ''\r\n    });\r\n\r\n    const fetch = useCallback(() => {\r\n        actions.read(`${paginationSorting.paginationSortingQuery}&filter=${filterValues.searchText}`);\r\n    }, [paginationSorting.paginationSortingQuery, filterValues, actions]);\r\n\r\n    useEffect(() => {\r\n        fetch();\r\n    }, [paginationSorting.paginationSortingQuery, filterValues]);\r\n\r\n    useEffect(() => {\r\n        fetchCategoryLookup();\r\n    }, []);\r\n\r\n    const handleOnSearch = useCallback(\r\n        (searchText: string) => {\r\n            setFilterValues({ searchText: searchText });\r\n            paginationSorting.setPage(0);\r\n        },\r\n        [filterValues]\r\n    );\r\n\r\n    const handleOnCreate = useCallback(() => {\r\n        setEditingEntity({\r\n            id: '',\r\n            name: '',\r\n            description: '',\r\n            thumbnail: '',\r\n            categoryId: ''\r\n        });\r\n        setShowFormModal();\r\n    }, []);\r\n\r\n    const handleOnEdit = useCallback((entity: Product) => {\r\n        setEditingEntity(entity);\r\n        setShowFormModal();\r\n    }, []);\r\n\r\n    const handleOnSubmit = useCallback(\r\n        (value: Product) => {\r\n            actions.update(value);\r\n        },\r\n        [actions]\r\n    );\r\n\r\n    const handleOnDelete = useCallback(() => {\r\n        selectable.selectedIds.forEach(id => {\r\n            actions.deleteId(id);\r\n        });\r\n    }, [selectable, actions]);\r\n\r\n    return (\r\n        <Page>\r\n            <PageHeader>\r\n                <PageHeaderRow collapseAt={600}>\r\n                    <PageHeaderTitle>Products</PageHeaderTitle>\r\n                </PageHeaderRow>\r\n            </PageHeader>\r\n            <PageSection>\r\n                <FlexLayout\r\n                    marginBottom={10}\r\n                    alignItems=\"stretch\"\r\n                    direction=\"column\"\r\n                    breakpoints={[{ minWidth: 600, direction: 'row', alignItems: 'center' }]}\r\n                >\r\n                    <FlexLayoutItem width=\"100%\">\r\n                        <FlexLayout>\r\n                            <FlexLayoutItem width=\"100%\" breakpoints={[{ minWidth: 600, width: 400 }]}>\r\n                                <SearchInput\r\n                                    name=\"search-field\"\r\n                                    placeholder=\"Search\"\r\n                                    onSearch={handleOnSearch}\r\n                                    width={400}\r\n                                />\r\n                            </FlexLayoutItem>\r\n                        </FlexLayout>\r\n                    </FlexLayoutItem>\r\n                </FlexLayout>\r\n                <ProductsTable\r\n                    items={selectable.selectableItems}\r\n                    paginationSorting={paginationSorting}\r\n                    selectable={selectable}\r\n                    totalResults={totalResults}\r\n                    fetchtStatus={status.read}\r\n                    deleteStatus={status.delete}\r\n                    onCreate={handleOnCreate}\r\n                    onEdit={handleOnEdit}\r\n                    onDelete={handleOnDelete}\r\n                />\r\n                <Modal onCancel={setHideFormModal} open={showFormModal} title=\"Form\" width={700}>\r\n                    <ProductsForm\r\n                        entity={editingEntity}\r\n                        onCancel={setHideFormModal}\r\n                        onSubmit={handleOnSubmit}\r\n                        requestStatus={status.update}\r\n                        categoryLookup={categoryLookup}\r\n                    />\r\n                </Modal>\r\n            </PageSection>\r\n        </Page>\r\n    );\r\n};\r\n","import {\r\n    DateTimeInput,\r\n    FieldGroup,\r\n    Form,\r\n    FormFooter,\r\n    getFieldProps,\r\n    TextArea,\r\n    TextField,\r\n    Tile\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus } from '@msamirtt/react-infrastructure';\r\nimport { useFormik } from 'formik';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport * as yup from 'yup';\r\nimport { Supply } from '../Supply';\r\n\r\ninterface Props {\r\n    entity: Supply | undefined;\r\n    onSubmit: (value: Supply) => void;\r\n    onCancel: () => void;\r\n    requestStatus: RequestStatus;\r\n    children: any;\r\n}\r\n\r\nexport const SuppliesForm: React.FC<Props> = ({ entity, onSubmit, onCancel, requestStatus, children }) => {\r\n    const handleOnSubmit = useCallback(\r\n        (value: any) => {\r\n            onSubmit(value);\r\n        },\r\n        [onSubmit]\r\n    );\r\n\r\n    // update formik when supplyDetails changes\r\n    useEffect(() => {\r\n        formik.setValues({ ...formik.values, supplyDetails: entity?.supplyDetails });\r\n    }, [entity]);\r\n\r\n    const formik = useFormik({\r\n        initialValues: { ...entity },\r\n        validationSchema: yup.object().shape({\r\n            supplyDate: yup.date().required('Required'),\r\n            transactionNumber: yup.number().required('Required'),\r\n            supplyDetails: yup.array().min(1, 'Must have 1 item')\r\n        }),\r\n        validateOnMount: false,\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        onSubmit: handleOnSubmit\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n            <Tile marginBottom={10}>\r\n                <FieldGroup marginTop={0} marginBottom={0}>\r\n                    <DateTimeInput\r\n                        {...getFieldProps(formik, 'supplyDate')}\r\n                        label=\"Supply Date\"\r\n                        showTime={true}\r\n                        clearable={true}\r\n                        marginBottom={0}\r\n                    />\r\n                    <TextField\r\n                        {...getFieldProps(formik, 'transactionNumber')}\r\n                        type=\"number\"\r\n                        label=\"Transaction Number\"\r\n                        marginBottom={0}\r\n                    />\r\n                </FieldGroup>\r\n                <TextArea {...getFieldProps(formik, 'notes')} label=\"Notes\" />\r\n            </Tile>\r\n\r\n            {children}\r\n\r\n            <FormFooter\r\n                entityId=\"id\"\r\n                submitRequest={requestStatus}\r\n                onCancel={onCancel}\r\n                disableSubmit={!formik.isValid}\r\n            />\r\n        </Form>\r\n    );\r\n};\r\n","import { FieldGroup, Form, FormFooter, getFieldProps, Select, TextField } from '@msamirtt/react-components';\r\nimport { useFormik } from 'formik';\r\nimport React, { useCallback } from 'react';\r\nimport * as yup from 'yup';\r\nimport { Lookup } from '../../../Shared/Lookup';\r\nimport { SupplyDetail } from '../Supply';\r\n\r\ninterface Props {\r\n    entity: SupplyDetail | undefined;\r\n    onSubmit: (value: SupplyDetail) => void;\r\n    onCancel: () => void;\r\n    productLookup: Lookup[];\r\n}\r\n\r\nexport const SupplyDetailsForm: React.FC<Props> = ({ entity, onSubmit, onCancel, productLookup }) => {\r\n    const handleOnSubmit = useCallback(\r\n        (value: any) => {\r\n            const productName = productLookup.find(x => x.id === value.productId)?.name;\r\n            onSubmit({ ...value, productName: productName });\r\n        },\r\n        [onSubmit]\r\n    );\r\n\r\n    const formik = useFormik({\r\n        initialValues: { ...entity },\r\n        validationSchema: yup.object().shape({\r\n            productId: yup.number().required('Required'),\r\n            quantity: yup\r\n                .number()\r\n                .required('Required')\r\n                .positive('Must be positive value')\r\n        }),\r\n        validateOnMount: false,\r\n        validateOnBlur: true,\r\n        validateOnChange: true,\r\n        onSubmit: handleOnSubmit\r\n    });\r\n\r\n    return (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n            <FieldGroup>\r\n                <Select\r\n                    {...getFieldProps(formik, 'productId')}\r\n                    data={productLookup}\r\n                    dataValue=\"id\"\r\n                    dataLabel=\"name\"\r\n                    sortAlphabetically={true}\r\n                    label=\"Product\"\r\n                    marginTop={0}\r\n                    marginBottom={0}\r\n                />\r\n                <TextField\r\n                    {...getFieldProps(formik, 'quantity')}\r\n                    type=\"number\"\r\n                    label=\"Quantity\"\r\n                    marginTop={0}\r\n                    marginBottom={0}\r\n                />\r\n            </FieldGroup>\r\n            <FormFooter entityId=\"id\" submitRequest={undefined} onCancel={onCancel} disableSubmit={!formik.isValid} />\r\n        </Form>\r\n    );\r\n};\r\n","import {\r\n    PrimaryButton,\r\n    ResponsiveTable,\r\n    ResponsiveTableActions,\r\n    ResponsiveTableBody,\r\n    ResponsiveTableCell,\r\n    ResponsiveTableFooter,\r\n    ResponsiveTableHeaderCell,\r\n    ResponsiveTableHeaderRow,\r\n    ResponsiveTableRow,\r\n    ResponsiveTableRowActions,\r\n    SecondaryButton\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus } from '@msamirtt/react-infrastructure';\r\nimport React from 'react';\r\nimport { SupplyDetail } from '../Supply';\r\n\r\ninterface Props {\r\n    items: SupplyDetail[] | undefined;\r\n    totalResults: number;\r\n    fetchtStatus: RequestStatus;\r\n    deleteStatus: RequestStatus;\r\n    onCreate: () => void;\r\n    onEdit: (entity: any) => void;\r\n    onDelete: (index: number) => void;\r\n}\r\n\r\nexport const SupplyDetailsTable: React.FC<Props> = ({ items, onCreate, onEdit, onDelete }) => (\r\n    <ResponsiveTable id=\"supply-details-table\" collapseAt={600}>\r\n        <ResponsiveTableHeaderRow>\r\n            <ResponsiveTableHeaderCell sortField=\"productName\">Product Name</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell width={400} sortField=\"quantity\">\r\n                Qty\r\n            </ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell />\r\n        </ResponsiveTableHeaderRow>\r\n\r\n        <ResponsiveTableBody>\r\n            {items?.map((item: SupplyDetail, index) => (\r\n                <ResponsiveTableRow key={index}>\r\n                    <ResponsiveTableCell>{item.productName}</ResponsiveTableCell>\r\n                    <ResponsiveTableCell>{item.quantity}</ResponsiveTableCell>\r\n\r\n                    <ResponsiveTableRowActions>\r\n                        <SecondaryButton id={`Edit-${index}`} size=\"small\" onClick={() => onEdit(item)}>\r\n                            Edit\r\n                        </SecondaryButton>\r\n                        <SecondaryButton\r\n                            color=\"secondary\"\r\n                            id={`Delete-${index}`}\r\n                            size=\"small\"\r\n                            onClick={() => onDelete(index)}\r\n                        >\r\n                            Delete\r\n                        </SecondaryButton>\r\n                    </ResponsiveTableRowActions>\r\n                </ResponsiveTableRow>\r\n            ))}\r\n        </ResponsiveTableBody>\r\n\r\n        <ResponsiveTableFooter alignRight>\r\n            <ResponsiveTableActions>\r\n                <PrimaryButton id=\"primaryAction\" onClick={onCreate} type=\"button\">\r\n                    New Entry\r\n                </PrimaryButton>\r\n            </ResponsiveTableActions>\r\n        </ResponsiveTableFooter>\r\n    </ResponsiveTable>\r\n);\r\n","import {\r\n    ContentLoadingSpinner,\r\n    Modal,\r\n    Page,\r\n    PageHeader,\r\n    PageHeaderRow,\r\n    PageHeaderTitle,\r\n    PageSection\r\n} from '@msamirtt/react-components';\r\nimport { useApiRequest, useBooleanState, useCrudOperations } from '@msamirtt/react-infrastructure';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { Lookup } from '../../../Shared/Lookup';\r\nimport { useLocalCrud } from '../../../Shared/Util/useLocalCrud';\r\nimport { Supply, SupplyDetail } from '../Supply';\r\nimport { SuppliesForm } from './SuppliesForm';\r\nimport { SupplyDetailsForm } from './SupplyDetailsForm';\r\nimport { SupplyDetailsTable } from './SupplyDetailsTable';\r\n\r\nexport const SuppliesFormContainer = () => {\r\n    /* \r\n        Header/Detail hacks\r\n        1-detail items should have index\r\n        2-Fetch if url ends with /id\r\n    */\r\n    const history = useHistory();\r\n    const { id } = useParams<{ id: string }>();\r\n    const [showFormModal, setShowFormModal, setHideFormModal] = useBooleanState(false);\r\n    const [editingEntity, setEditingEntity] = useState<Supply>();\r\n    const [editingDetail, setEditingDetail] = useState<SupplyDetail>();\r\n    const [productLookup, productLookupAction, productRequestStatus] = useApiRequest<Lookup[]>();\r\n\r\n    const [, { makeRequest }, fetchtStatus] = useApiRequest<Supply>({\r\n        onSuccess: (_, item) =>\r\n            setEditingEntity({ ...item!, supplyDetails: item!.supplyDetails.map((x, i) => ({ ...x, index: i })) })\r\n        //hack#1: set index for each item\r\n    });\r\n\r\n    const [, actions, status, { totalResults }] = useCrudOperations<Supply>('/api/supplies', 'channel', {\r\n        onCreateSuccess: () => history.push('/supplies'),\r\n        onUpdateSuccess: () => history.push('/supplies'),\r\n        onDeleteSuccess: () => history.push('/supplies')\r\n    });\r\n\r\n    const fetchSupply = useCallback((id: string) => makeRequest('GET', `/api/supplies/${id}`), [makeRequest]);\r\n    const fetchProductLookup = useCallback(() => {\r\n        productLookupAction.makeRequest('GET', `/api/products/lookup`);\r\n    }, [productLookupAction.makeRequest]);\r\n\r\n    // Header\r\n    const handleOnSubmit = useCallback(\r\n        (value: Supply) => {\r\n            actions.update(value);\r\n        },\r\n        [actions]\r\n    );\r\n\r\n    const handleOnCancel = useCallback(() => history.push('/supplies'), []);\r\n\r\n    // Detail\r\n    const { onCreateDetail, onEditDetail, onDeleteDetail, onConfirmDetail } = useLocalCrud(\r\n        editingEntity,\r\n        setEditingEntity,\r\n        editingEntity?.supplyDetails,\r\n        setEditingDetail,\r\n        'supplyDetails'\r\n    );\r\n\r\n    const handleOnCreateDetail = useCallback(() => {\r\n        onCreateDetail({\r\n            id: undefined,\r\n            productId: '',\r\n            quantity: '',\r\n            index: undefined\r\n        });\r\n        setShowFormModal();\r\n    }, [onCreateDetail]);\r\n\r\n    const handleOnEditDetail = useCallback(\r\n        (entity: SupplyDetail) => {\r\n            onEditDetail(entity);\r\n            setShowFormModal();\r\n        },\r\n        [onEditDetail]\r\n    );\r\n\r\n    const handleOnConfirmDetail = useCallback(\r\n        (value: SupplyDetail) => {\r\n            onConfirmDetail(value);\r\n            setHideFormModal();\r\n        },\r\n        [onConfirmDetail]\r\n    );\r\n\r\n    const handleOnDeleteDetail = useCallback(\r\n        (index: number) => {\r\n            onDeleteDetail(index);\r\n        },\r\n        [onDeleteDetail]\r\n    );\r\n\r\n    // hack#2 Fetch if url ends with /id\r\n    // or set default values for new entity.\r\n    useEffect(() => {\r\n        if (parseInt(id) > 0) {\r\n            fetchSupply(id);\r\n        } else {\r\n            setEditingEntity({\r\n                id: '',\r\n                supplyDate: new Date(),\r\n                notes: '',\r\n                transactionNumber: '',\r\n                supplyDetails: []\r\n            });\r\n        }\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        fetchProductLookup();\r\n    }, []);\r\n\r\n    return (\r\n        <Page>\r\n            <PageHeader>\r\n                <PageHeaderRow collapseAt={600}>\r\n                    <PageHeaderTitle>{editingEntity?.id ? `Supply - #${editingEntity.id}` : 'Supply'}</PageHeaderTitle>\r\n                </PageHeaderRow>\r\n            </PageHeader>\r\n            <PageSection>\r\n                <ContentLoadingSpinner\r\n                    isLoading={fetchtStatus.isPending || productRequestStatus.isPending}\r\n                    hasError={fetchtStatus.hasError || productRequestStatus.hasError}\r\n                    errorMessage=\"Supply or Products not found!\"\r\n                    top={100}\r\n                >\r\n                    {editingEntity && (\r\n                        <SuppliesForm\r\n                            onSubmit={handleOnSubmit}\r\n                            onCancel={handleOnCancel}\r\n                            entity={editingEntity}\r\n                            requestStatus={status.update}\r\n                        >\r\n                            <SupplyDetailsTable\r\n                                items={editingEntity?.supplyDetails}\r\n                                totalResults={totalResults}\r\n                                fetchtStatus={status.read}\r\n                                deleteStatus={status.delete}\r\n                                onCreate={handleOnCreateDetail}\r\n                                onEdit={handleOnEditDetail}\r\n                                onDelete={handleOnDeleteDetail}\r\n                            />\r\n                            <Modal onCancel={setHideFormModal} open={showFormModal} title=\"Form\" width={700}>\r\n                                <SupplyDetailsForm\r\n                                    entity={editingDetail}\r\n                                    productLookup={productLookup}\r\n                                    onCancel={setHideFormModal}\r\n                                    onSubmit={handleOnConfirmDetail}\r\n                                />\r\n                            </Modal>\r\n                        </SuppliesForm>\r\n                    )}\r\n                </ContentLoadingSpinner>\r\n            </PageSection>\r\n        </Page>\r\n    );\r\n};\r\n","import {\r\n    DateFormat,\r\n    LoadingButton,\r\n    PaginationAndSortingResponse,\r\n    PrimaryButton,\r\n    ResponsiveTable,\r\n    ResponsiveTableActions,\r\n    ResponsiveTableBody,\r\n    ResponsiveTableCell,\r\n    ResponsiveTableFooter,\r\n    ResponsiveTableHeaderCell,\r\n    ResponsiveTableHeaderRow,\r\n    ResponsiveTablePagination,\r\n    ResponsiveTableRow,\r\n    ResponsiveTableRowActions,\r\n    SecondaryButton\r\n} from '@msamirtt/react-components';\r\nimport { RequestStatus } from '@msamirtt/react-infrastructure';\r\nimport React from 'react';\r\nimport { Supply } from './Supply';\r\n\r\ninterface Props {\r\n    items: Supply[];\r\n    clickedItemId: string | undefined;\r\n    paginationSorting: PaginationAndSortingResponse;\r\n    totalResults: number;\r\n    fetchtStatus: RequestStatus;\r\n    deleteStatus: RequestStatus;\r\n    onCreate: () => void;\r\n    onEdit: (entity: any) => void;\r\n    onDelete: (id: string) => void;\r\n}\r\n\r\nexport const SuppliesTable: React.FC<Props> = ({\r\n    items,\r\n    clickedItemId,\r\n    paginationSorting,\r\n    totalResults,\r\n    fetchtStatus,\r\n    deleteStatus,\r\n    onCreate,\r\n    onEdit,\r\n    onDelete\r\n}) => (\r\n    <ResponsiveTable\r\n        id=\"supply-table\"\r\n        collapseAt={600}\r\n        sortParams={paginationSorting.sort}\r\n        onSort={paginationSorting.setSort}\r\n        isLoading={fetchtStatus.isPending && !fetchtStatus.hasInitialResponse}\r\n        isUpdating={fetchtStatus.isPending && fetchtStatus.hasInitialResponse}\r\n        hasError={fetchtStatus.hasError}\r\n    >\r\n        <ResponsiveTableHeaderRow>\r\n            <ResponsiveTableHeaderCell sortField=\"transactionNumber\">#</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell sortField=\"supplyDate\">Supply Date</ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell width=\"60%\" sortField=\"notes\">\r\n                Notes\r\n            </ResponsiveTableHeaderCell>\r\n            <ResponsiveTableHeaderCell />\r\n        </ResponsiveTableHeaderRow>\r\n\r\n        <ResponsiveTableBody>\r\n            {items.map((item: Supply) => (\r\n                <ResponsiveTableRow key={item.id}>\r\n                    <ResponsiveTableCell>{item.transactionNumber}</ResponsiveTableCell>\r\n                    <ResponsiveTableCell promoteToHeaderOnMobile>\r\n                        <DateFormat date={item.supplyDate.toString()} />\r\n                    </ResponsiveTableCell>\r\n                    <ResponsiveTableCell>{item.notes}</ResponsiveTableCell>\r\n\r\n                    <ResponsiveTableRowActions>\r\n                        <LoadingButton\r\n                            id={`deleteAction-${item.id}`}\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            requestStatus={item.id === clickedItemId ? deleteStatus : undefined}\r\n                            onClick={() => onDelete(item.id)}\r\n                        >\r\n                            Delete\r\n                        </LoadingButton>\r\n                        <SecondaryButton id=\"Edit\" size=\"small\" onClick={() => onEdit(item)}>\r\n                            Edit\r\n                        </SecondaryButton>\r\n                    </ResponsiveTableRowActions>\r\n                </ResponsiveTableRow>\r\n            ))}\r\n        </ResponsiveTableBody>\r\n\r\n        <ResponsiveTableFooter>\r\n            <ResponsiveTablePagination\r\n                onPageChange={paginationSorting.setPage}\r\n                page={paginationSorting.page}\r\n                rowsPerPage={paginationSorting.rowsPerPage}\r\n                totalResults={totalResults}\r\n                onRowsPerPageChange={paginationSorting.setRowsPerPage}\r\n                rowsPerPageOptions={[5, 10, 20]}\r\n                showRowsPerPageSelect={true}\r\n            />\r\n            <ResponsiveTableActions>\r\n                <PrimaryButton id=\"primaryAction\" onClick={onCreate}>\r\n                    New Entry\r\n                </PrimaryButton>\r\n            </ResponsiveTableActions>\r\n        </ResponsiveTableFooter>\r\n    </ResponsiveTable>\r\n);\r\n","import { FiltersConfigItem } from '@msamirtt/react-components/dist/src/components/SearchAndFiltering/types/FiltersConfigItem';\r\n\r\nexport interface Supply {\r\n    id: string;\r\n    transactionNumber: string;\r\n    notes: string;\r\n    supplyDate: Date;\r\n    supplyDetails: SupplyDetail[];\r\n}\r\n\r\nexport interface SupplyDetail {\r\n    index?: number;\r\n    id?: string;\r\n    productId: string;\r\n    productName?: string;\r\n    quantity: string;\r\n}\r\n\r\nexport const filtersConfig: FiltersConfigItem[] = [\r\n    {\r\n        type: 'date-range',\r\n        label: 'Supply Date',\r\n        name: 'supplyDateRange'\r\n    }\r\n];\r\n","import {\r\n    Filters,\r\n    FilterValues,\r\n    Page,\r\n    PageHeader,\r\n    PageHeaderRow,\r\n    PageHeaderTitle,\r\n    PageSection,\r\n    SearchAndFiltersLayout,\r\n    SearchInput,\r\n    SearchSummary,\r\n    usePaginationAndSorting\r\n} from '@msamirtt/react-components';\r\nimport { useApiRequest } from '@msamirtt/react-infrastructure';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { SuppliesTable } from './SuppliesTable';\r\nimport { filtersConfig, Supply } from './Supply';\r\n\r\nexport const SuppliesContainer = () => {\r\n    const history = useHistory();\r\n    const [clickedItemId, setClickedItemId] = useState<string | undefined>();\r\n\r\n    const paginationSorting = usePaginationAndSorting({\r\n        defaultSortField: 'supplyDate',\r\n        defaultSortDirection: 'desc'\r\n    });\r\n\r\n    const [items, { makeRequest }, fetchtStatus, { totalResults }] = useApiRequest<Supply[]>();\r\n    const [, deleteAction, deleteRequestStatus] = useApiRequest({\r\n        onSuccess: () => fetch()\r\n    });\r\n\r\n    const [filterValues, setFilterValues] = useState<FilterValues>({\r\n        supplyDateRange: { from: '', to: '' },\r\n        searchText: ''\r\n    });\r\n\r\n    const fetch = useCallback(() => {\r\n        makeRequest('POST', `/api/supplies/get`, {\r\n            page: paginationSorting.page,\r\n            pageSize: paginationSorting.rowsPerPage,\r\n            orderBy: paginationSorting.sort.field,\r\n            sortDirection: paginationSorting.sort.direction,\r\n            filter: {\r\n                searchText: filterValues.searchText,\r\n                supplyDateTo: filterValues.supplyDateRange.to,\r\n                supplyDateFrom: filterValues.supplyDateRange.from\r\n            }\r\n        });\r\n    }, [paginationSorting.paginationSortingQuery, filterValues, makeRequest]);\r\n\r\n    useEffect(() => {\r\n        fetch();\r\n    }, [paginationSorting.paginationSortingQuery, filterValues]);\r\n\r\n    const handleOnSearch = useCallback(\r\n        (searchText: string) => {\r\n            setFilterValues({ ...filterValues, searchText: searchText });\r\n            paginationSorting.setPage(0);\r\n        },\r\n        [filterValues]\r\n    );\r\n\r\n    const handleOnCreate = useCallback(() => {\r\n        history.push('supplies/new');\r\n    }, []);\r\n\r\n    const handleOnEdit = useCallback((entity: Supply) => {\r\n        history.push(`supplies/${entity.id}`);\r\n    }, []);\r\n\r\n    const handleOnDelete = useCallback(\r\n        (id: string) => {\r\n            setClickedItemId(id);\r\n            deleteAction.makeRequest('DELETE', `/api/supplies/${id}`);\r\n        },\r\n        [deleteAction.makeRequest]\r\n    );\r\n\r\n    return (\r\n        <Page>\r\n            <PageHeader>\r\n                <PageHeaderRow collapseAt={600}>\r\n                    <PageHeaderTitle>Supplies</PageHeaderTitle>\r\n                </PageHeaderRow>\r\n            </PageHeader>\r\n            <PageSection>\r\n                <SearchAndFiltersLayout\r\n                    search={<SearchInput name=\"search-field\" placeholder=\"Search\" onSearch={handleOnSearch} />}\r\n                    filters={<Filters config={filtersConfig} values={filterValues} onChange={setFilterValues} />}\r\n                />\r\n                <SearchSummary\r\n                    filtersConfig={filtersConfig}\r\n                    filterValues={filterValues}\r\n                    onFiltersChange={setFilterValues}\r\n                    searchTerm={filterValues.searchText}\r\n                    onSearchChange={handleOnSearch}\r\n                />\r\n                <SuppliesTable\r\n                    items={items}\r\n                    clickedItemId={clickedItemId}\r\n                    paginationSorting={paginationSorting}\r\n                    totalResults={totalResults}\r\n                    fetchtStatus={fetchtStatus}\r\n                    deleteStatus={deleteRequestStatus}\r\n                    onCreate={handleOnCreate}\r\n                    onEdit={handleOnEdit}\r\n                    onDelete={handleOnDelete}\r\n                />\r\n            </PageSection>\r\n        </Page>\r\n    );\r\n};\r\n","import * as Icons from '@material-ui/icons/';\r\nimport { HubConnectionBuilder, HubConnectionState } from '@microsoft/signalr';\r\nimport {\r\n    AppContent,\r\n    AppHeader,\r\n    AppNavigation,\r\n    AppNavigationDivider,\r\n    AppNavigationItem,\r\n    AppWrapper,\r\n    CurrentUser,\r\n    PageNotFound,\r\n    Toast\r\n} from '@msamirtt/react-components';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport { CategoriesContainer } from './Areas/Categories/CategoriesContainer';\r\nimport { DashboardContainer } from './Areas/Dashboard/DashboardContainer';\r\nimport { ExampleContainer } from './Areas/Examples/ExampleContainer';\r\nimport { IssuesContainer } from './Areas/Issues/IssuesContainer';\r\nimport { IssuesFormContainer } from './Areas/Issues/Pages/IssuesFormContainer';\r\nimport { ProductsContainer } from './Areas/Products/ProductsContainer';\r\nimport { SuppliesFormContainer } from './Areas/Supplies/Pages/SuppliesFormContainer';\r\nimport { SuppliesContainer } from './Areas/Supplies/SuppliesContainer';\r\n\r\nrequire('react-dom');\r\n\r\nconst App: React.FC = () => {\r\n    const [toastMsg, setToastMsg] = useState('');\r\n    const [toastSeverity, setToastSeverity] = useState<'info' | 'success' | 'warning' | 'error' | undefined>('info');\r\n\r\n    const signalRConnection = new HubConnectionBuilder()\r\n        .withUrl('https://localhost:44312' + '/applicationhub') // https://localhost:5001/\r\n        .withAutomaticReconnect()\r\n        .build();\r\n\r\n    useEffect(() => {\r\n        if (signalRConnection.state === HubConnectionState.Disconnected) signalRConnection.start();\r\n\r\n        signalRConnection.on('WarningMessage', (sessionId, message) => {\r\n            setToastSeverity('error');\r\n            setToastMsg(message);\r\n        });\r\n    }, [signalRConnection.state]);\r\n\r\n    return (\r\n        <AppWrapper>\r\n            <AppHeader\r\n                logo={<img src=\"final-logo-example.png\" alt=\"\" height=\"100%\" />}\r\n                actions={<CurrentUser name=\"User #1\" collapseAt={700} />}\r\n            />\r\n            <AppNavigation>\r\n                <AppNavigationItem to=\"/\" icon={<Icons.Home />}>\r\n                    Home\r\n                </AppNavigationItem>\r\n                <AppNavigationItem to=\"/examples\" icon={<Icons.DirectionsRun />}>\r\n                    Examples\r\n                </AppNavigationItem>\r\n                <AppNavigationDivider />\r\n                <AppNavigationItem to=\"/categories\" icon={<Icons.AllInbox />}>\r\n                    Categories\r\n                </AppNavigationItem>\r\n                <AppNavigationItem to=\"/products\" icon={<Icons.AssignmentReturned />}>\r\n                    Products\r\n                </AppNavigationItem>\r\n                <AppNavigationItem to=\"/supplies\" icon={<Icons.Backup />}>\r\n                    Supplies\r\n                </AppNavigationItem>\r\n                <AppNavigationItem to=\"/issues\" icon={<Icons.BrightnessLow />}>\r\n                    Issues\r\n                </AppNavigationItem>\r\n            </AppNavigation>\r\n            <AppContent>\r\n                <Switch>\r\n                    <Route path=\"/categories\" component={CategoriesContainer} />\r\n                    <Route path=\"/products\" component={ProductsContainer} />\r\n                    <Route path=\"/supplies/:id\" component={SuppliesFormContainer} />\r\n                    <Route path=\"/supplies\" component={SuppliesContainer} />\r\n                    <Route path=\"/issues/:id\" component={IssuesFormContainer} />\r\n                    <Route path=\"/issues\" component={IssuesContainer} />\r\n                    <Route path=\"/examples\" component={ExampleContainer} />\r\n                    <Route path=\"/\" component={DashboardContainer} />\r\n                    <Route path=\"*\" exact={true} component={PageNotFound} />\r\n                </Switch>\r\n            </AppContent>\r\n            <Toast severity={toastSeverity} message={toastMsg} setMessage={setToastMsg} />\r\n        </AppWrapper>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ApplicationError, HSSComponentProvider } from '@msamirtt/react-components';\nimport { ErrorBoundary, HSSInfrastructureProvider } from '@msamirtt/react-infrastructure';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nasync function initializeApp() {\n    // await pm.initialize({\n    //     brokerUrl: `wss://${process.env.REACT_APP_GATEWAY_IP_ADDRESS || window.location.hostname}:5005/mqtt`,\n    //     clientCredentials:\n    //         process.env.NODE_ENV === 'production' ? pm.getClientCredentials() : process.env.REACT_APP_CLIENT_CREDS!,\n    //     scope: 'hubSpokeAPI.read hubSpokeAPI.write'\n    // });\n\n    ReactDOM.render(\n        <ErrorBoundary errorComponent={() => <ApplicationError />}>\n            <HSSInfrastructureProvider>\n                <HSSComponentProvider maxContentWidth={1500}>\n                    <BrowserRouter>\n                        <App />\n                    </BrowserRouter>\n                </HSSComponentProvider>\n            </HSSInfrastructureProvider>\n        </ErrorBoundary>,\n        document.getElementById('root')\n    );\n}\n\ninitializeApp();\n"],"sourceRoot":""}